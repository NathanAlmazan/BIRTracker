{"version":3,"file":"static/js/816.a737a7e8.chunk.js","mappings":"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","sources":["pages/dashboard/StatusReportBar.tsx","pages/dashboard/PurposeReportBar.tsx","pages/dashboard/TypesReportDonut.tsx","pages/dashboard/UserTasks.tsx","pages/dashboard/RequestSummaryTable.tsx","pages/dashboard/index.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Stack from '@mui/material/Stack';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport Chart from 'react-apexcharts';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_DOCUMENT_TYPE_ANALYTICS } from '../../api/offices';\r\nimport { DocumentStatus, DocumentTypes, Analytics } from '../../api/threads/types';\r\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { chartColors } from '.';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n\r\nfunction getWeekBeforeDate() {\r\n    const current = new Date();\r\n    current.setDate(current.getDate() - 30);\r\n\r\n    return current;\r\n}\r\n\r\nexport default function StatusReportBar({ officeId }: { officeId: number }) {\r\n    const theme = useTheme();\r\n    const { role } = useAppSelector((state) => state.auth);\r\n    const [startDate, setStartDate] = React.useState<string>(getWeekBeforeDate().toISOString());\r\n    const [endDate, setEndDate] = React.useState<string>(new Date().toISOString());\r\n    const { data: analytics, refetch } = useQuery<{ getThreadTypeAnalytics: Analytics[] }>(GET_DOCUMENT_TYPE_ANALYTICS, {\r\n        variables: {\r\n            officeId: officeId,\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            superuser: role ? role.superuser : null\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    });\r\n    const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n    const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n\r\n    const [chartOptions, setChartOptions] = React.useState<any>();\r\n    const [chartSeries, setChartSeries] = React.useState<{\r\n        name: string;\r\n        data: number[];\r\n    }[]>([])\r\n\r\n    React.useEffect(() => {\r\n        if (analytics && threadTypes && threadStatus) {\r\n            const { primary } = theme.palette.text;\r\n            const grey200 = theme.palette.grey[200];\r\n            const grey500 = theme.palette.grey[500];\r\n\r\n            setChartOptions({\r\n                chart: {\r\n                    id: 'bar-chart',\r\n                    stacked: true,\r\n                    toolbar: {\r\n                        show: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true\r\n                    }\r\n                },\r\n                colors: chartColors,\r\n                responsive: [\r\n                    {\r\n                        breakpoint: 500,\r\n                        options: {\r\n                            legend: {\r\n                                position: 'bottom',\r\n                                offsetX: -10,\r\n                                offsetY: 0\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                xaxis: {\r\n                    type: 'category',\r\n                    categories: threadTypes.getAllThreadTypes.map(type => type.docType),\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary],\r\n                            fontSize: '8px'\r\n                        }\r\n                    }\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: grey200,\r\n                    show: true\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '50%'\r\n                    }\r\n                },\r\n                legend: {\r\n                    show: true,\r\n                    position: 'top',\r\n                    fontSize: '14px',\r\n                    fontFamily: `'Roboto', sans-serif`,\r\n                    offsetX: 20,\r\n                    labels: {\r\n                        useSeriesColors: false,\r\n                        colors: grey500\r\n                    },\r\n                    markers: {\r\n                        width: 16,\r\n                        height: 16,\r\n                        radius: 5\r\n                    },\r\n                    itemMargin: {\r\n                        horizontal: 15,\r\n                        vertical: 8\r\n                    },\r\n                },\r\n                fill: {\r\n                    type: 'solid'\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                }\r\n            })\r\n\r\n            // setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n            //     name: status.statusLabel,\r\n            //     data: [35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]\r\n            // })))\r\n\r\n            setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n                name: status.statusLabel,\r\n                data: threadTypes.getAllThreadTypes.map(type => {\r\n                    const data = analytics.getThreadTypeAnalytics.filter(s => s.status.statusId === status.statusId && s.docType.docId === type.docId);\r\n\r\n                    if (data.length > 0) return data.reduce((sum, d) => sum + d.count, 0);\r\n                    return 0;\r\n                })\r\n            })))\r\n        }\r\n    }, [analytics, threadTypes, threadStatus, theme]);\r\n\r\n    const handleStartDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setStartDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: date.toISOString(),\r\n                endDate: endDate\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleEndDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setEndDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: startDate,\r\n                endDate: date.toISOString()\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader \r\n                title={\r\n                    <Box>\r\n                        <Typography variant='h6'>\r\n                            Document Types Tracker\r\n                        </Typography>\r\n                    </Box>\r\n                }\r\n                action={\r\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <Stack direction='row' spacing={1}>\r\n                                <DatePicker \r\n                                    label=\"Report Start Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(startDate)} \r\n                                    onChange={handleStartDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                                <DatePicker \r\n                                    label=\"Report End Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(endDate)} \r\n                                    onChange={handleEndDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                        </Stack>\r\n                    </LocalizationProvider>\r\n                }\r\n            />\r\n            <CardContent>\r\n                {chartOptions && (\r\n                    <Chart type='bar' height={500} options={chartOptions} series={chartSeries} />\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n// mui\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Stack from '@mui/material/Stack';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport Chart from 'react-apexcharts';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_DOCUMENT_PURPOSE_ANALYTICS } from '../../api/offices';\r\nimport { DocumentStatus, Analytics, DocumentPurpose } from '../../api/threads/types';\r\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_PURPOSE } from '../../api/threads';\r\nimport { chartColors } from '.';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n\r\nfunction getWeekBeforeDate() {\r\n    const current = new Date();\r\n    current.setDate(current.getDate() - 30);\r\n\r\n    return current;\r\n}\r\n\r\nexport default function PurposeReportBar({ officeId }: { officeId: number }) {\r\n    const theme = useTheme();\r\n    const { role } = useAppSelector((state) => state.auth);\r\n    const [startDate, setStartDate] = React.useState<string>(getWeekBeforeDate().toISOString());\r\n    const [endDate, setEndDate] = React.useState<string>(new Date().toISOString());\r\n    const { data: analytics, refetch } = useQuery<{ getThreadPurposeAnalytics: Analytics[] }>(GET_DOCUMENT_PURPOSE_ANALYTICS, {\r\n        variables: {\r\n            officeId: officeId,\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            superuser: role ? role.superuser : null\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    });\r\n    const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n    const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n\r\n    const [chartOptions, setChartOptions] = React.useState<any>();\r\n    const [chartSeries, setChartSeries] = React.useState<{\r\n        name: string;\r\n        data: number[];\r\n    }[]>([])\r\n\r\n    React.useEffect(() => {\r\n        if (analytics && threadPurposes && threadStatus) {\r\n            const { primary } = theme.palette.text;\r\n            const grey200 = theme.palette.grey[200];\r\n            const grey500 = theme.palette.grey[500];\r\n\r\n            setChartOptions({\r\n                chart: {\r\n                    id: 'bar-chart',\r\n                    stacked: true,\r\n                    toolbar: {\r\n                        show: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true\r\n                    }\r\n                },\r\n                colors: chartColors,\r\n                responsive: [\r\n                    {\r\n                        breakpoint: 500,\r\n                        options: {\r\n                            legend: {\r\n                                position: 'bottom',\r\n                                offsetX: -10,\r\n                                offsetY: 0\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                xaxis: {\r\n                    type: 'category',\r\n                    categories: threadPurposes.getAllThreadPurpose.map(purpose => purpose.purposeName),\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary],\r\n                            fontSize: '8px'\r\n                        }\r\n                    }\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [primary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: grey200,\r\n                    show: true\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '50%'\r\n                    }\r\n                },\r\n                legend: {\r\n                    show: true,\r\n                    position: 'top',\r\n                    fontSize: '14px',\r\n                    fontFamily: `'Roboto', sans-serif`,\r\n                    offsetX: 20,\r\n                    labels: {\r\n                        useSeriesColors: false,\r\n                        colors: grey500\r\n                    },\r\n                    markers: {\r\n                        width: 16,\r\n                        height: 16,\r\n                        radius: 5\r\n                    },\r\n                    itemMargin: {\r\n                        horizontal: 15,\r\n                        vertical: 8\r\n                    },\r\n                },\r\n                fill: {\r\n                    type: 'solid'\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                }\r\n            })\r\n\r\n            // setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n            //     name: status.statusLabel,\r\n            //     data: [35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]\r\n            // })))\r\n\r\n            setChartSeries(threadStatus.getAllThreadStatus.map(status => ({\r\n                name: status.statusLabel,\r\n                data: threadPurposes.getAllThreadPurpose.map(purpose => {\r\n                    const data = analytics.getThreadPurposeAnalytics.filter(s => s.status.statusId === status.statusId && s.purpose.purposeId === purpose.purposeId);\r\n\r\n                    if (data.length > 0) return data.reduce((sum, d) => sum + d.count, 0);\r\n                    return 0;\r\n                })\r\n            })))\r\n        }\r\n    }, [analytics, threadPurposes, threadStatus, theme]);\r\n\r\n    const handleStartDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setStartDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: date.toISOString(),\r\n                endDate: endDate\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleEndDateChange = (date: Dayjs | null) => {\r\n        if (date) {\r\n            setEndDate(date.toISOString());\r\n            refetch({\r\n                officeId: officeId,\r\n                startDate: startDate,\r\n                endDate: date.toISOString()\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader \r\n                title={\r\n                    <Box>\r\n                        <Typography variant='h6'>\r\n                            Document Purpose Tracker\r\n                        </Typography>\r\n                    </Box>\r\n                }\r\n                action={\r\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <Stack direction='row' spacing={1}>\r\n                                <DatePicker \r\n                                    label=\"Report Start Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(startDate)} \r\n                                    onChange={handleStartDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                                <DatePicker \r\n                                    label=\"Report End Date\"\r\n                                    views={[\"year\", \"month\", \"day\"]}\r\n                                    value={dayjs(endDate)} \r\n                                    onChange={handleEndDateChange} \r\n                                    format=\"MMMM DD, YYYY\"\r\n                                />\r\n                        </Stack>\r\n                    </LocalizationProvider>\r\n                }\r\n            />\r\n            <CardContent>\r\n                {chartOptions && (\r\n                    <Chart type='bar' height={500} options={chartOptions} series={chartSeries} />\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport merge from 'lodash/merge';\r\n// @mui\r\nimport { useTheme, styled, alpha } from '@mui/material/styles';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Card, CardHeader, CardActions, CardContent, Button } from '@mui/material';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { Analytics, DocumentTypes } from '../../api/threads/types';\r\nimport { GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { GET_DOCUMENT_STATUS_ANALYTICS } from '../../api/offices';\r\nimport { chartColors } from '.';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst CHART_HEIGHT = 350;\r\nconst LEGEND_HEIGHT = 72;\r\n\r\nconst StyledChartWrapper = styled('div')(({ theme }) => ({\r\n  height: CHART_HEIGHT,\r\n  marginTop: theme.spacing(5),\r\n  '& .apexcharts-canvas svg': { height: CHART_HEIGHT },\r\n  '& .apexcharts-canvas svg,.apexcharts-canvas foreignObject': {\r\n    overflow: 'visible',\r\n  },\r\n  '& .apexcharts-legend': {\r\n    height: LEGEND_HEIGHT,\r\n    alignContent: 'center',\r\n    position: 'relative !important',\r\n    borderTop: `solid 1px ${theme.palette.divider}`,\r\n    top: `calc(${CHART_HEIGHT - LEGEND_HEIGHT}px) !important`,\r\n  },\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface TypesReportDonutProps {\r\n    officeId: number;\r\n    completed: boolean;\r\n}\r\n\r\nexport default function TypesReportDonut({ officeId, completed }: TypesReportDonutProps) {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const { role } = useAppSelector((state) => state.auth);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: analytics } = useQuery<{ getStatusAnalytics: Analytics[] }>(GET_DOCUMENT_STATUS_ANALYTICS, {\r\n    variables: {\r\n      officeId: officeId,\r\n      completed: completed,\r\n      superuser: role ? role.superuser : null\r\n    },\r\n    fetchPolicy: 'network-only'\r\n  });\r\n  const [chartValues, setChartValues] = React.useState<number[]>([]);\r\n\r\n  const chartOptions = useChart({\r\n    colors: chartColors,\r\n    labels: threadTypes ? threadTypes.getAllThreadTypes.map(type => type.docType) : [],\r\n    stroke: { colors: [theme.palette.background.paper] },\r\n    legend: { floating: true, horizontalAlign: 'center' },\r\n    dataLabels: { enabled: false, dropShadow: { enabled: false } },\r\n    tooltip: {\r\n      fillSeriesColor: false,\r\n      y: {\r\n        formatter: (seriesName: number) => seriesName.toFixed(2),\r\n        title: {\r\n          formatter: (seriesName: string) => `${seriesName}`,\r\n        },\r\n      },\r\n    }\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (analytics && threadTypes) {\r\n      // setChartValues([35, 125, 35, 35, 35, 80, 35, 20, 35, 45, 15, 75, 35, 125, 35, 35, 35, 80, 35, 20]);\r\n      setChartValues(threadTypes.getAllThreadTypes.map(type => {\r\n        const data = analytics.getStatusAnalytics.filter(d => d.docType.docId === type.docId);\r\n\r\n        if (data.length > 0) return data.reduce((sum, a) => sum + a.count, 0);\r\n        return 0;\r\n      }))\r\n    }\r\n  }, [analytics, threadTypes])\r\n\r\n  const handleRedirect = () => {\r\n    if (completed) navigate('/app/inbox/finished');\r\n    else navigate('/app/inbox/tasks');\r\n  }\r\n\r\n  return (\r\n    <Card sx={{ height: '100%' }}>\r\n      <CardHeader title={\r\n          <Typography variant='h6'>\r\n            {completed ? \"Completed Documents\" : \"Pending Documents\"}\r\n          </Typography>\r\n        } \r\n      />\r\n\r\n     <CardContent>\r\n      <StyledChartWrapper dir=\"ltr\">\r\n          <ReactApexChart type=\"donut\" series={chartValues} options={chartOptions} height={380} />\r\n        </StyledChartWrapper>\r\n     </CardContent>\r\n\r\n      <CardActions>\r\n        <Button size=\"large\" onClick={handleRedirect} fullWidth>{completed ? \"See Completed Documents\" : \"See Pending Documents\"}</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function useChart(options: any) {\r\n  const theme = useTheme();\r\n\r\n  const LABEL_TOTAL = {\r\n    show: true,\r\n    label: 'Total',\r\n    color: theme.palette.text.secondary,\r\n    fontSize: theme.typography.subtitle2.fontSize,\r\n    fontWeight: theme.typography.subtitle2.fontWeight,\r\n    lineHeight: theme.typography.subtitle2.lineHeight,\r\n  };\r\n\r\n  const LABEL_VALUE = {\r\n    offsetY: 8,\r\n    color: theme.palette.text.primary,\r\n    fontSize: theme.typography.h3.fontSize,\r\n    fontWeight: theme.typography.h3.fontWeight,\r\n    lineHeight: theme.typography.h3.lineHeight,\r\n  };\r\n\r\n  const baseOptions = {\r\n    // Colors\r\n    colors: [\r\n      theme.palette.primary.main,\r\n      theme.palette.warning.main,\r\n      theme.palette.info.main,\r\n      theme.palette.error.main,\r\n      theme.palette.success.main,\r\n      theme.palette.warning.dark,\r\n      theme.palette.success.main,\r\n      theme.palette.info.dark,\r\n      theme.palette.info.light,\r\n    ],\r\n\r\n    // Chart\r\n    chart: {\r\n      toolbar: { show: false },\r\n      zoom: { enabled: false },\r\n      // animations: { enabled: false },\r\n      foreColor: theme.palette.text.disabled,\r\n      fontFamily: theme.typography.fontFamily,\r\n    },\r\n\r\n    // States\r\n    states: {\r\n      hover: {\r\n        filter: {\r\n          type: 'lighten',\r\n          value: 0.04,\r\n        },\r\n      },\r\n      active: {\r\n        filter: {\r\n          type: 'darken',\r\n          value: 0.88,\r\n        },\r\n      },\r\n    },\r\n\r\n    // Fill\r\n    fill: {\r\n      opacity: 1,\r\n      gradient: {\r\n        type: 'vertical',\r\n        shadeIntensity: 0,\r\n        opacityFrom: 0.4,\r\n        opacityTo: 0,\r\n        stops: [0, 100],\r\n      },\r\n    },\r\n\r\n    // Datalabels\r\n    dataLabels: { enabled: false },\r\n\r\n    // Stroke\r\n    stroke: {\r\n      width: 3,\r\n      curve: 'smooth',\r\n      lineCap: 'round',\r\n    },\r\n\r\n    // Grid\r\n    grid: {\r\n      strokeDashArray: 3,\r\n      borderColor: theme.palette.divider,\r\n      xaxis: {\r\n        lines: {\r\n          show: false,\r\n        },\r\n      },\r\n    },\r\n\r\n    // Xaxis\r\n    xaxis: {\r\n      axisBorder: { show: false },\r\n      axisTicks: { show: false },\r\n    },\r\n\r\n    // Markers\r\n    markers: {\r\n      size: 0,\r\n      strokeColors: theme.palette.background.paper,\r\n    },\r\n\r\n    // Tooltip\r\n    tooltip: {\r\n      x: {\r\n        show: false,\r\n      },\r\n    },\r\n\r\n    // Legend\r\n    legend: {\r\n      show: false\r\n    },\r\n\r\n    // plotOptions\r\n    plotOptions: {\r\n      // Bar\r\n      bar: {\r\n        borderRadius: 4,\r\n        columnWidth: '28%',\r\n        borderRadiusApplication: 'end',\r\n        borderRadiusWhenStacked: 'last',\r\n      },\r\n\r\n      // Pie + Donut\r\n      pie: {\r\n        donut: {\r\n          labels: {\r\n            show: true,\r\n            value: LABEL_VALUE,\r\n            total: LABEL_TOTAL,\r\n          },\r\n        },\r\n      },\r\n\r\n      // Radialbar\r\n      radialBar: {\r\n        track: {\r\n          strokeWidth: '100%',\r\n          background: alpha(theme.palette.grey[500], 0.16),\r\n        },\r\n        dataLabels: {\r\n          value: LABEL_VALUE,\r\n          total: LABEL_TOTAL,\r\n        },\r\n      },\r\n\r\n      // Radar\r\n      radar: {\r\n        polygons: {\r\n          fill: { colors: ['transparent'] },\r\n          strokeColors: theme.palette.divider,\r\n          connectorColors: theme.palette.divider,\r\n        },\r\n      },\r\n\r\n      // polarArea\r\n      polarArea: {\r\n        rings: {\r\n          strokeColor: theme.palette.divider,\r\n        },\r\n        spokes: {\r\n          connectorColors: theme.palette.divider,\r\n        },\r\n      },\r\n    },\r\n\r\n    // Responsive\r\n    responsive: [\r\n      {\r\n        // sm\r\n        breakpoint: theme.breakpoints.values.sm,\r\n        options: {\r\n          plotOptions: { bar: { columnWidth: '40%' } },\r\n        },\r\n      },\r\n      {\r\n        // md\r\n        breakpoint: theme.breakpoints.values.md,\r\n        options: {\r\n          plotOptions: { bar: { columnWidth: '32%' } },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return merge(baseOptions, options);\r\n}","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport Card from '@mui/material/Card';\r\nimport Button from '@mui/material/Button';\r\nimport Divider from '@mui/material/Divider';\r\nimport Typography from '@mui/material/Typography';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { Thread } from '../../api/threads/types';\r\n// icons\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport TaskAltIcon from '@mui/icons-material/TaskAlt';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_THREAD_INBOX } from '../../api/threads';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface UserTasksProps {\r\n    userId: string;\r\n}\r\n\r\nexport default function UserTasks({ userId }: UserTasksProps) {\r\n    const navigate = useNavigate();\r\n    const { data: tasks } = useQuery<{ getThreadInbox: Thread[] }>(GET_THREAD_INBOX, {\r\n        variables: {\r\n          userId: userId,\r\n          type: \"pending\"\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    });\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title='To-Do-List' />\r\n\r\n        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>\r\n            {tasks?.getThreadInbox.length === 0 && (\r\n                 <Box sx={{ display: 'flex', height: 280, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n                    <TaskAltIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n                    <Typography variant=\"subtitle1\">\r\n                        Job Well Done!\r\n                    </Typography>\r\n                    <Typography variant=\"body1\">\r\n                        You have no recurring tasks\r\n                    </Typography>\r\n                </Box>\r\n            )}\r\n            <Stack spacing={3} sx={{ p: 3, pr: 0 }}>\r\n                {tasks?.getThreadInbox.map((task) => (\r\n                    <TaskItem key={task.refId} task={task} />\r\n                ))}\r\n            </Stack>\r\n        </Box>\r\n\r\n        <Divider />\r\n\r\n        <Box sx={{ p: 2, textAlign: 'right' }}>\r\n            <Button size=\"small\" color=\"inherit\" endIcon={<ArrowForwardIosIcon />} onClick={() => navigate('/app/inbox')}>\r\n                View all\r\n            </Button>\r\n        </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface NewsItemProps {\r\n    task: Thread\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nfunction TaskItem({ task }: NewsItemProps) {\r\n  const { subject, author, docType, dateUpdated } = task;\r\n\r\n  return (\r\n    <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Avatar sx={{ width: 48, height: 48 }}>\r\n            {`${author.firstName.charAt(0)}${author.lastName.charAt(0)}`}\r\n        </Avatar>\r\n\r\n        <Box sx={{ minWidth: 240, flexGrow: 1 }}>\r\n            <Typography color=\"inherit\" variant=\"subtitle2\" noWrap>\r\n                {subject}\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} noWrap>\r\n                {`${author.firstName} ${author.lastName} — ${docType.docType}`}\r\n            </Typography>\r\n        </Box>\r\n\r\n            <Typography variant=\"caption\" sx={{ pr: 3, flexShrink: 0, color: 'text.secondary' }}>\r\n                {`Updated at ${formatInboxDate(dateUpdated)}`}\r\n            </Typography>\r\n    </Stack>\r\n  );\r\n}","import React from 'react';\r\n// mui\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Button from '@mui/material/Button'\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport Table from '@mui/material/Table';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport Chip from '@mui/material/Chip';\r\n// csv\r\nimport { CSVLink } from 'react-csv';\r\n// icons\r\nimport IosShareIcon from '@mui/icons-material/IosShare';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_DOCUMENT_SUMMARY_ANALYTICS } from '../../api/offices';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n\r\nfunction optionYears() {\r\n    const current = new Date().getFullYear();\r\n\r\n    return [current - 3, current - 2, current - 1, current]\r\n}\r\n\r\nfunction getTagColor(tagName: string) {\r\n    if (tagName === \"Top Priority\") return \"error\";\r\n    else if (tagName === \"Confidential\") return \"warning\";\r\n    return \"primary\"\r\n}\r\n\r\nfunction getStatusColor(statusLabel: string) {\r\n    if (statusLabel.includes(\"Complied\") || statusLabel.includes(\"FYI\")) return \"success\";\r\n    else return undefined;\r\n}\r\n\r\nconst formatSummaryDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nfunction getReportSummary(thread: Thread): string[] {\r\n    return [\r\n        thread.refSlipNum,\r\n        `${thread.author.firstName} ${thread.author.lastName} (${thread.author.officeSection.sectionOffice.officeName})`,\r\n        thread.recipientList.map(recipient => `${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : `(${recipient.sectionName})`}`).join(', '),\r\n        thread.purpose.purposeName,\r\n        thread.docType.docType,\r\n        formatSummaryDate(thread.dateCreated),\r\n        formatSummaryDate(thread.dateDue),\r\n        thread.recipientList.map((recipient, index) => `${thread.statusList[index].statusLabel} (${recipient.sectionOffice.refNum})`).join(', '),\r\n        `${thread.threadTag ? thread.threadTag.tagName : ''}`\r\n    ]\r\n}\r\n\r\nexport default function RequestSummaryTable() {\r\n    const { uid } = useAppSelector((state) => state.auth);\r\n    const { data: summary, refetch } = useQuery<{ getThreadSummary: Thread[] }>(GET_DOCUMENT_SUMMARY_ANALYTICS, {\r\n        variables: {\r\n           userId: uid,\r\n           dateCreated: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString()\r\n        },\r\n        fetchPolicy: 'network-only'\r\n    });\r\n    const [month, setMonth] = React.useState<number>(new Date().getMonth());\r\n    const [year, setYear] = React.useState<number>(new Date().getFullYear())\r\n    const [page, setPage] = React.useState<number>(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState<number>(5);\r\n    const [emptyRows, setEmptyRows] = React.useState<number>(0);\r\n\r\n    React.useEffect(() => {\r\n        if (summary) {\r\n            setEmptyRows(page > 0 ? Math.max(0, (1 + page) * rowsPerPage - summary.getThreadSummary.length) : 0);\r\n        }\r\n    }, [summary, page, rowsPerPage])\r\n\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n    const handleMonthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMonth(parseInt(event.target.value));\r\n        refetch({\r\n            userId: uid,\r\n            dateCreated: new Date(new Date().getFullYear(), parseInt(event.target.value), 1).toISOString()\r\n        })\r\n    }\r\n\r\n    const handleYearChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setYear(parseInt(event.target.value));\r\n        refetch({\r\n            userId: uid,\r\n            dateCreated: new Date(parseInt(event.target.value), new Date().getMonth(), 1).toISOString()\r\n        })\r\n    }\r\n\r\n    const handlePageChange = (event:  unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    }\r\n\r\n    const handleRowPerPageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10))\r\n        setPage(0);\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader \r\n                title='Requests Summary'\r\n                action={\r\n                    <Stack direction='row' spacing={2}>\r\n                        <TextField \r\n                            name='report-month'\r\n                            label=\"Month\"\r\n                            value={month}\r\n                            onChange={handleMonthChange}\r\n                            select\r\n                        >\r\n                            {months.map((month, index) => (\r\n                                <MenuItem key={month} value={index}>{month}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <TextField \r\n                            name='report-year'\r\n                            label='Year'\r\n                            value={year}\r\n                            onChange={handleYearChange}\r\n                            select\r\n                        >\r\n                            {optionYears().map(year => (\r\n                                <MenuItem key={year} value={year}>{year.toString()}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        {summary && (\r\n                            <CSVLink filename={`${new Date(year, month, 1).toISOString().split('T')[0]}.csv`} data={[\r\n                                [\"Reference #\", \"Received From\", \"Offices Concerned\", \"For\", \"Document Type\", \"Date Received\", \"Date Due\", \"Statuses\", \"Tags\"],\r\n                                ...summary.getThreadSummary.map(thread => getReportSummary(thread))\r\n                            ]}>\r\n                                <Button\r\n                                    variant='contained'\r\n                                    startIcon={<IosShareIcon />}\r\n                                    sx={{ minHeight: 50 }}\r\n                                >\r\n                                    Export\r\n                                </Button>\r\n                            </CSVLink>\r\n                        )}\r\n                    </Stack>\r\n                }\r\n            />\r\n            <CardContent>\r\n                <TableContainer>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Reference #</TableCell>\r\n                                <TableCell>Received From</TableCell>\r\n                                <TableCell>Offices Concerned</TableCell>\r\n                                <TableCell>Details</TableCell>\r\n                                <TableCell>Date Received</TableCell>\r\n                                <TableCell>Date Due</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {summary && summary.getThreadSummary.slice(\r\n                                page * rowsPerPage,\r\n                                page * rowsPerPage + rowsPerPage\r\n                            ).map(thread => (\r\n                                <TableRow key={thread.refId}>\r\n                                    <TableCell style={{ verticalAlign: 'top' }}>\r\n                                        <Typography variant='body1' sx={{ fontWeight: 800, minWidth: 250 }}>\r\n                                            {thread.refSlipNum}\r\n                                        </Typography>\r\n                                        {thread.threadTag && (\r\n                                            <Chip size=\"small\" label={thread.threadTag.tagName} color={getTagColor(thread.threadTag.tagName)} sx={{ my: 1 }} />\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell style={{ verticalAlign: 'top' }}>\r\n                                        <Typography variant='body1'>\r\n                                            {thread.author.firstName + ' ' + thread.author.lastName}\r\n                                        </Typography>\r\n                                        <Typography variant='subtitle2'>\r\n                                            {thread.author.role.roleName}\r\n                                        </Typography>\r\n                                        <Typography variant='caption'>\r\n                                            {`${thread.author.officeSection.sectionOffice.officeName} ${thread.author.officeSection.sectionName === \"default\" ? \"\" : thread.author.officeSection.sectionName}`}\r\n                                        </Typography>\r\n                                    </TableCell>\r\n                                    <TableCell style={{ verticalAlign: 'top' }}>\r\n                                        <Stack spacing={2}>\r\n                                            {thread.recipientList.map((recipient, index) => (\r\n                                                <div key={index}>\r\n                                                    <Typography variant='body1'>\r\n                                                        {recipient.sectionOffice.officeName}\r\n                                                    </Typography>\r\n                                                    <Chip size=\"small\" label={thread.statusList[index].statusLabel} color={getStatusColor(thread.statusList[index].statusLabel)} />\r\n                                                </div>\r\n                                            ))}\r\n                                        </Stack>\r\n                                    </TableCell>\r\n                                    <TableCell style={{ verticalAlign: 'top' }}>\r\n                                        <Typography variant='body1'>\r\n                                            {`For ${thread.purpose.purposeName.replace(\"For\", \"\")}`}\r\n                                        </Typography>\r\n                                        <Typography variant='caption'>\r\n                                            {thread.docType.docType}\r\n                                        </Typography>\r\n                                    </TableCell>\r\n                                    <TableCell style={{ verticalAlign: 'top' }}>{formatSummaryDate(thread.dateCreated)}</TableCell>\r\n                                    <TableCell style={{ verticalAlign: 'top' }}>{formatSummaryDate(thread.dateDue)}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n\r\n                            {emptyRows > 0 && (\r\n                                <TableRow\r\n                                    style={{\r\n                                        height: 80 * emptyRows,\r\n                                    }}\r\n                                >\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination \r\n                    rowsPerPageOptions={[5, 10, 15]}\r\n                    component='div'\r\n                    count={summary ? summary.getThreadSummary.length : 0}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    onPageChange={handlePageChange}\r\n                    onRowsPerPageChange={handleRowPerPageChange}\r\n                />\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Grid from '@mui/material/Grid';\r\n// project imports\r\nimport StatusReportBar from './StatusReportBar';\r\nimport PurposeReportBar from './PurposeReportBar';\r\nimport TypesReportDonut from './TypesReportDonut';\r\nimport UserTasks from './UserTasks';\r\nimport RequestSummaryTable from './RequestSummaryTable';\r\nimport { useAppSelector } from '../../redux/hooks';\r\n\r\n\r\nexport default function DashboardPage() {\r\n    const { uid, office } = useAppSelector((state) => state.auth);\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{ maxHeight: 'calc(100vh - 80px)', overflowY: 'auto', pb: 2, px: 2 }}>\r\n            <Grid item md={12} lg={8}>\r\n                <StatusReportBar officeId={office?.sectionId as number} />\r\n            </Grid>\r\n            <Grid item md={6} lg={4}>\r\n                <TypesReportDonut\r\n                    officeId={office?.sectionId as number}\r\n                    completed={true}\r\n                />\r\n            </Grid>\r\n            <Grid item md={12} lg={8}>\r\n                <PurposeReportBar officeId={office?.sectionId as number} />\r\n            </Grid>\r\n            <Grid item md={6} lg={4}>\r\n                <TypesReportDonut\r\n                    officeId={office?.sectionId as number}\r\n                    completed={false}\r\n                />\r\n            </Grid>\r\n            <Grid item md={12} lg={12}>\r\n                <RequestSummaryTable />\r\n            </Grid>\r\n            <Grid item md={12} lg={8}>\r\n                <UserTasks userId={uid as string} />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport const chartColors = ['#9288F8', '#FFD2D7', '#461959', '#7A316F', '#CD6688', '#AED8CC', '#9A208C', '#E11299', '#35155D', '#512B81', '#4477CE', '#8CABFF', '#6F61C0', '#A084E8', '#8BE8E5', '#D5FFE4', '#4682A9', '#749BC2', '#91C8E4', '#F6F4EB', '#FFE7A0', '#322653', '#8062D6', '#FFEAEA', '#F5C6EC'];"],"names":["StatusReportBar","_ref","officeId","theme","useTheme","role","useAppSelector","state","auth","_React$useState","React","current","Date","setDate","getDate","getWeekBeforeDate","toISOString","_React$useState2","_slicedToArray","startDate","setStartDate","_React$useState3","_React$useState4","endDate","setEndDate","_useQuery","useQuery","GET_DOCUMENT_TYPE_ANALYTICS","variables","superuser","fetchPolicy","analytics","data","refetch","threadTypes","GET_ALL_THREAD_TYPES","threadStatus","GET_ALL_THREAD_STATUS","_React$useState5","_React$useState6","chartOptions","setChartOptions","_React$useState7","_React$useState8","chartSeries","setChartSeries","primary","palette","text","grey200","grey","grey500","chart","id","stacked","toolbar","show","zoom","enabled","colors","chartColors","responsive","breakpoint","options","legend","position","offsetX","offsetY","xaxis","type","categories","getAllThreadTypes","map","docType","labels","style","fontSize","yaxis","grid","borderColor","tooltip","plotOptions","bar","horizontal","columnWidth","fontFamily","useSeriesColors","markers","width","height","radius","itemMargin","vertical","fill","dataLabels","getAllThreadStatus","status","name","statusLabel","getThreadTypeAnalytics","filter","s","statusId","docId","length","reduce","sum","d","count","_jsxs","Card","children","_jsx","CardHeader","title","Box","Typography","variant","action","LocalizationProvider","dateAdapter","AdapterDayjs","Stack","direction","spacing","DatePicker","label","views","value","dayjs","onChange","date","format","CardContent","Chart","series","PurposeReportBar","GET_DOCUMENT_PURPOSE_ANALYTICS","threadPurposes","GET_ALL_THREAD_PURPOSE","getAllThreadPurpose","purpose","purposeName","getThreadPurposeAnalytics","purposeId","StyledChartWrapper","styled","marginTop","overflow","alignContent","borderTop","concat","divider","top","CHART_HEIGHT","TypesReportDonut","_ref2","completed","navigate","useNavigate","GET_DOCUMENT_STATUS_ANALYTICS","chartValues","setChartValues","LABEL_TOTAL","color","secondary","typography","subtitle2","fontWeight","lineHeight","LABEL_VALUE","h3","baseOptions","main","warning","info","error","success","dark","light","foreColor","disabled","states","hover","active","opacity","gradient","shadeIntensity","opacityFrom","opacityTo","stops","stroke","curve","lineCap","strokeDashArray","lines","axisBorder","axisTicks","size","strokeColors","background","paper","x","borderRadius","borderRadiusApplication","borderRadiusWhenStacked","pie","donut","total","radialBar","track","strokeWidth","alpha","radar","polygons","connectorColors","polarArea","rings","strokeColor","spokes","breakpoints","values","sm","md","merge","useChart","floating","horizontalAlign","dropShadow","fillSeriesColor","y","formatter","seriesName","toFixed","getStatusAnalytics","a","sx","dir","ReactApexChart","CardActions","Button","onClick","fullWidth","UserTasks","userId","tasks","GET_THREAD_INBOX","maxHeight","overflowY","getThreadInbox","display","justifyContent","alignItems","flexDirection","TaskAltIcon","mb","p","pr","task","TaskItem","refId","Divider","textAlign","endIcon","ArrowForwardIosIcon","formatInboxDate","toLocaleDateString","undefined","weekday","year","month","day","subject","author","dateUpdated","Avatar","firstName","charAt","lastName","minWidth","flexGrow","noWrap","flexShrink","optionYears","getFullYear","formatSummaryDate","RequestSummaryTable","uid","GET_DOCUMENT_SUMMARY_ANALYTICS","dateCreated","getMonth","summary","setMonth","setYear","page","setPage","rowsPerPage","setRowsPerPage","_React$useState9","_React$useState10","emptyRows","setEmptyRows","Math","max","getThreadSummary","TextField","event","parseInt","target","select","index","MenuItem","toString","CSVLink","filename","split","_toConsumableArray","thread","refSlipNum","officeSection","sectionOffice","officeName","recipientList","recipient","sectionName","join","dateDue","statusList","refNum","threadTag","tagName","getReportSummary","startIcon","IosShareIcon","minHeight","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","slice","verticalAlign","Chip","my","roleName","includes","replace","colSpan","TablePagination","rowsPerPageOptions","component","onPageChange","newPage","onRowsPerPageChange","DashboardPage","_useAppSelector","office","Grid","container","pb","px","item","lg","sectionId"],"sourceRoot":""}