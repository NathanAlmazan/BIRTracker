{"version":3,"file":"static/js/601.f0e3500b.chunk.js","mappings":"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","sources":["pages/threads/CreateThread.tsx","pages/threads/FilterPopover.tsx","pages/threads/EmailList.tsx","pages/threads/AddLinkDialog.tsx","pages/threads/ReplyBox.tsx","pages/threads/MessageCard.tsx","pages/threads/Signature.tsx","components/Form2309/index.tsx","pages/threads/RequestDetails.tsx","pages/threads/Directory.tsx","pages/threads/History.tsx","pages/threads/ThreadList.tsx"],"sourcesContent":["import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Typography from '@mui/material/Typography';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// api\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { \r\n    DocumentPurpose,\r\n    DocumentTypes, \r\n    MessageFiles, \r\n    Messages, \r\n    OfficeSections, \r\n    Thread,\r\n    ThreadTags,\r\n    UserAccounts\r\n} from '../../api/threads/types';\r\nimport { \r\n    CREATE_THREAD,\r\n    GET_ALL_THREAD_PURPOSE,\r\n    GET_ALL_THREAD_TAGS,\r\n    GET_ALL_THREAD_TYPES, \r\n    GET_BIR_OFFICES,\r\n    GET_TEMP_REF_NUM,\r\n    SEND_THREAD_MESSAGE\r\n} from '../../api/threads';\r\n// project imports\r\nimport ReplyBox, { MessageCreateInput, MessageInput } from './ReplyBox';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport { GET_USER_ACCOUNTS_BY_OFFICES } from '../../api/offices';\r\n\r\n\r\ninterface ThreadInput {\r\n    subject: string;\r\n    authorId: string;\r\n    statusId: number;\r\n    recipientId: number[];\r\n    recipientUserId: string[];\r\n    docTypeId?: number;\r\n    purposeId?: number;\r\n    tagId: number | null;\r\n    attachments: boolean;\r\n    purposeNotes: string;\r\n    actionable: boolean;\r\n    dateDue: string;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface CreateThreadProps {\r\n    userId: string;\r\n    onDiscardThread: () => void;\r\n    onCreateThread: (threadId: string) => void;\r\n}\r\n\r\nexport function generateOfficeCode(officeCode?: string, sectionCode?: string) {\r\n    if (officeCode && sectionCode) return ` (${officeCode}-${sectionCode})`;\r\n    else if (officeCode) return ` (${officeCode})`\r\n    else return '';\r\n}\r\n\r\nexport default function CreateThread(props: CreateThreadProps) {\r\n  const theme = useTheme();\r\n  const { data: tempRefNum } = useQuery<{ getThreadRefNum: string }>(GET_TEMP_REF_NUM, \r\n    { \r\n        variables: { authorId: props.userId },\r\n        fetchPolicy: 'network-only'\r\n    });\r\n  const { data: officeSections } = useQuery<{ getAllOfficeSections: OfficeSections[] }>(GET_BIR_OFFICES);\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n  const { data: threadTags } = useQuery<{ getAllThreadTags: ThreadTags[] }>(GET_ALL_THREAD_TAGS);\r\n  const { data: threadOfficers, refetch: refetchOfficers } = useQuery<{ getAccountsByOffice: UserAccounts[] }>(GET_USER_ACCOUNTS_BY_OFFICES, { variables: { officeIds: [] } });\r\n  const [createThread] = useMutation<{ createThread: Thread[] }, { data: ThreadInput }>(CREATE_THREAD);\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [offices, setOffices] = React.useState<Queue>();\r\n  const [types, setTypes] = React.useState<Queue>();\r\n  const [purposes, setPurposes] = React.useState<Queue>();\r\n  const [officers, setOfficers] = React.useState<{ [key: string]: string }>();\r\n  const [formData, setFormData] = React.useState<ThreadInput>({\r\n    subject: \"\",\r\n    authorId: props.userId,\r\n    statusId: 2,\r\n    attachments: true,\r\n    actionable: true,\r\n    dateDue: new Date().toISOString(),\r\n    tagId: null,\r\n    recipientId: [],\r\n    recipientUserId: [],\r\n    purposeNotes: ''\r\n  })\r\n  const [messageData, setMessageData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<{ \r\n    recipient?: string, \r\n    subject?: string, \r\n    type?: string, \r\n    general?: string,\r\n    purpose?: string\r\n  }>();\r\n\r\n  React.useEffect(() => {\r\n    if (officeSections && threadTypes && threadPurposes) {\r\n        let officeObject: Queue = {};\r\n        officeSections.getAllOfficeSections.forEach(office => {\r\n            if (office.sectionName === \"default\") {\r\n                officeObject[office.sectionOffice.officeName + \" — All\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = -(office.sectionOffice.officeId);\r\n                officeObject[office.sectionOffice.officeName + \" — Admin\" + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            } else {\r\n                officeObject[office.sectionOffice.officeName + \" — \" + office.sectionName + generateOfficeCode(office.sectionOffice.refNum, office.refNum)] = office.sectionId;\r\n            }\r\n        })\r\n        \r\n        setOffices(officeObject);\r\n\r\n        let typesObject: Queue = {};\r\n        threadTypes.getAllThreadTypes.forEach(type => {\r\n            typesObject[type.docType] = type.docId;\r\n        })\r\n        setTypes(typesObject);\r\n\r\n        let purposesObject: Queue = {};\r\n        threadPurposes.getAllThreadPurpose.forEach(purpose => {\r\n            purposesObject[purpose.purposeName] = purpose.purposeId;\r\n        })\r\n        setPurposes(purposesObject);\r\n\r\n    }\r\n  }, [officeSections, threadTypes, threadPurposes]);\r\n\r\n  React.useEffect(() => {\r\n    if (threadOfficers) {\r\n        let officersObject: { [key: string]: string } = {};\r\n        threadOfficers.getAccountsByOffice.forEach(officer => {\r\n            officersObject[officer.firstName + \" \" + officer.lastName] = officer.accountId\r\n        })\r\n\r\n        setOfficers(officersObject);\r\n    }\r\n  }, [threadOfficers])\r\n\r\n  React.useEffect(() => {\r\n    if (formData.docTypeId && threadTypes) {\r\n        const docType = threadTypes.getAllThreadTypes.find(type => type.docId === formData.docTypeId);\r\n        if (docType) setFormData(state => ({ ...state, actionable: docType.actionable }));\r\n    }\r\n  }, [formData.docTypeId, threadTypes])\r\n\r\n  if (!offices || !types || !purposes || !officers) return <LoadOverlay open={true} />\r\n\r\n  const handleSubjectTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, subject: event.target.value });\r\n\r\n  const handleThreadTypeChange = (_: any, newValue: string | null) => setFormData({ ...formData, docTypeId: types[newValue as string] });\r\n\r\n  const handleThreadPurposeChange = (_: any, newValue: string | null) => setFormData({ ...formData, purposeId: purposes[newValue as string] });\r\n\r\n  const handlePurposeNotesChange = (_: any, newValue: string) => setFormData({ ...formData, purposeNotes: newValue });\r\n\r\n  const handleTegChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(event.target.value, 10);\r\n    if (value === 0) setFormData({ ...formData, tagId: null });\r\n    else setFormData({ ...formData, tagId: value });\r\n  }\r\n\r\n  const handleRecipientChange = (_: any, newValue: string[]) => {\r\n    setFormData({ ...formData, recipientId: newValue.map(value => offices[value]) });\r\n    refetchOfficers({ officeIds: newValue.map(value => offices[value]).filter(id => id > 0) })\r\n  }\r\n\r\n  const handleOfficersChange = (_: any, newValue: string[]) => {\r\n    setFormData({ ...formData, recipientUserId: newValue.map(value => officers[value]) });\r\n  }\r\n\r\n  const handleToggleAttachments = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, attachments: event.target.checked });\r\n\r\n  const handleToggleActionable = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, actionable: event.target.checked });\r\n\r\n  const handleDateDueChange = (date: Dayjs | null) => {\r\n    if (date) setFormData({ ...formData, dateDue: date.toISOString() });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError({ ...formError, general: undefined });\r\n\r\n  const handleCreateThread = async () => {\r\n    // validation\r\n    if (!formData.recipientId) {\r\n        setFormError({ ...formError, recipient: \"Recipient is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.purposeId) {\r\n        setFormError({ ...formError, purpose: \"Purpose is required.\" });\r\n        return\r\n    }\r\n\r\n    if (!formData.docTypeId) {\r\n        setFormError({ ...formError, type: \"Type is required.\" });\r\n        return\r\n    }\r\n\r\n    if (formData.subject.length === 0) {\r\n        setFormError({ ...formError, recipient: \"Subject is required.\" });\r\n        return\r\n    }\r\n\r\n    // create thread\r\n    try {\r\n        const threadResult = await createThread({ variables: { data: formData }});\r\n\r\n        if (!threadResult.data) {\r\n            setFormError({ ...formError, general: \"Failed to create thread.\" });\r\n            return\r\n        }\r\n\r\n         // create initial message\r\n        let uploadedFiles: MessageFiles[] = [];\r\n        let insertedLinks: MessageFiles[] = [];\r\n\r\n        // upload files if any\r\n        if (messageData.files.length > 0) {\r\n            const form = new FormData();\r\n            messageData.files.forEach((file) => {\r\n                form.append(\"files\", file);\r\n            })\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                uploadedFiles = result.data.files;\r\n            } catch (err) {\r\n                setFormError({ ...formError, general: (err as Error).message });\r\n                return\r\n            }\r\n        }\r\n\r\n        // arrange links if any\r\n        if (messageData.links.length > 0) {\r\n            insertedLinks = messageData.links.map(link => ({\r\n                fileName: link.name,\r\n                fileType: \"url\",\r\n                fileUrl: link.link\r\n            }))\r\n        }\r\n\r\n        // combine link array\r\n        const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n        // send first message\r\n        try {\r\n            for (let i = 0; i < threadResult.data.createThread.length; i++) {\r\n                const thread = threadResult.data.createThread[i]\r\n\r\n                await sendThreadMessage({ variables: { data: {\r\n                    message: messageData.message,\r\n                    files: messageFiles,\r\n                    senderId: props.userId,\r\n                    threadId: thread.refId\r\n                }}})\r\n            }\r\n\r\n            props.onCreateThread(threadResult.data.createThread[0].refId);\r\n        } catch (err) {\r\n            setFormError({ ...formError, general: (err as Error).message });\r\n            return\r\n        }\r\n\r\n    } catch (err) {\r\n        setFormError({ ...formError, general: (err as Error).message });\r\n        return\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Stack spacing={3} sx={{ p: 2 }}>\r\n                <div>\r\n                    <Stack direction='row' justifyContent='space-between' alignItems='end'>\r\n                        <Stack direction='row' spacing={1} alignItems='center' sx={{ py: 1 }}>\r\n                            <Button \r\n                                variant='contained' \r\n                                endIcon={<SendIcon />}\r\n                                onClick={handleCreateThread}\r\n                            >\r\n                                Send\r\n                            </Button>\r\n                            <Tooltip title='Discard'>\r\n                                <IconButton onClick={props.onDiscardThread}>\r\n                                    <DeleteOutlinedIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Stack>\r\n                        \r\n                        {tempRefNum && (\r\n                            <Typography variant='body2' sx={{ fontWeight: 800 }}>\r\n                                {`${tempRefNum.getThreadRefNum}`}\r\n                            </Typography>\r\n                        )}\r\n                    </Stack>\r\n                    <Divider /> \r\n                </div>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='To' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        multiple\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(offices)}\r\n                        onChange={handleRecipientChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.recipient !== undefined}\r\n                                helperText={formError && formError.recipient}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Officers' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        multiple\r\n                        freeSolo\r\n                        fullWidth\r\n                        options={Object.keys(officers)}\r\n                        onChange={handleOfficersChange}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard'\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n            \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Subject' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField \r\n                        name='subject'\r\n                        variant='standard'\r\n                        value={formData.subject}\r\n                        onChange={handleSubjectTextChange}\r\n                        fullWidth\r\n                        error={formError?.subject !== undefined}\r\n                        helperText={formError && formError.subject}\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onInputChange={handlePurposeNotesChange}\r\n                        onChange={handleThreadPurposeChange}\r\n                        options={Object.keys(purposes)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.purpose !== undefined}\r\n                                helperText={formError && formError.purpose}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n                \r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                    <Autocomplete\r\n                        freeSolo\r\n                        fullWidth\r\n                        onChange={handleThreadTypeChange}\r\n                        options={Object.keys(types)}\r\n                        renderInput={(params) => \r\n                            <TextField \r\n                                {...params} \r\n                                variant='standard' \r\n                                error={formError?.type !== undefined}\r\n                                helperText={formError && formError.type}\r\n                            />\r\n                        }\r\n                    />\r\n                </Stack>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <Chip label='Tag' variant='outlined' sx={{ width: 80 }} />\r\n                    <TextField\r\n                        fullWidth\r\n                        name='tagId'\r\n                        variant='standard'\r\n                        select\r\n                        value={formData.tagId ? formData.tagId : 0}\r\n                        onChange={handleTegChange}\r\n                    >\r\n                        <MenuItem value={0}>None</MenuItem>\r\n                        {threadTags && threadTags.getAllThreadTags.map(tag => (\r\n                            <MenuItem key={tag.tagId} value={tag.tagId}>{tag.tagName}</MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </Stack>\r\n\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DatePicker \r\n                        label=\"Date Due\"\r\n                        views={[\"year\", \"month\", \"day\"]}\r\n                        value={dayjs(formData.dateDue)} \r\n                        onChange={handleDateDueChange} \r\n                        format=\"MMMM DD, YYYY\"\r\n                    />\r\n                </LocalizationProvider>\r\n\r\n                <Stack direction='row' spacing={2}>\r\n                    <FormControlLabel \r\n                        control={\r\n                            <Checkbox \r\n                                checked={formData.attachments} \r\n                                onChange={handleToggleAttachments} \r\n                            />\r\n                        } \r\n                        label=\"Attachments Required?\" \r\n                    />\r\n                    <FormControlLabel \r\n                        control={\r\n                            <Checkbox \r\n                                checked={formData.actionable} \r\n                                onChange={handleToggleActionable} \r\n                            />\r\n                        } \r\n                        label=\"Action Required?\" \r\n                    />\r\n                </Stack>\r\n\r\n                <ReplyBox userId={props.userId} onChange={(data) => setMessageData(data)} />\r\n\r\n                <Snackbar open={formError?.general !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                    <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                        {formError && formError.general}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Stack>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}","import React, { useState } from 'react';\r\n// @mui\r\nimport { alpha } from '@mui/material/styles';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport Drawer from '@mui/material/Drawer';\r\n// icons\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport ClearAllIcon from '@mui/icons-material/ClearAll';\r\n// api\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_THREAD_STATUS, GET_ALL_THREAD_TAGS, GET_ALL_THREAD_TYPES } from '../../api/threads';\r\nimport { DocumentStatus, DocumentTypes, ThreadTags } from '../../api/threads/types';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport type SortOptions = \"crt_asc\" | \"crt_desc\" | \"due_asc\" | \"due_desc\"\r\n\r\nexport interface FilterOptions {\r\n  typeId: number;\r\n  statusId: number;\r\n  tagId: number;\r\n  sortBy: SortOptions\r\n}\r\n\r\nexport default function FilterPopover({ options, onChange }: { options: FilterOptions, onChange: (options: FilterOptions) => void }) {\r\n  const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const { data: threadTags } = useQuery<{ getAllThreadTags: ThreadTags[] }>(GET_ALL_THREAD_TAGS);\r\n  const [open, setOpen] = useState<boolean>(false);\r\n\r\n  const handleToggle = (event: React.MouseEvent<HTMLButtonElement>) => setOpen(!open);\r\n\r\n  const handleClearFilter = () => {\r\n    onChange({\r\n      typeId: 0,\r\n      statusId: 0,\r\n      tagId: 0,\r\n      sortBy: \"due_desc\"\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleToggle}\r\n        sx={{\r\n          p: 0,\r\n          mx: 2,\r\n          ...(open && {\r\n            '&:before': {\r\n              zIndex: 1,\r\n              content: \"''\",\r\n              width: '100%',\r\n              height: '100%',\r\n              borderRadius: '50%',\r\n              position: 'absolute',\r\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\r\n            },\r\n          }),\r\n        }}\r\n      >\r\n        <FilterListIcon />\r\n      </IconButton>\r\n\r\n      <Drawer\r\n        anchor='right'\r\n        open={open}\r\n        onClose={handleToggle}\r\n      >\r\n        <Stack spacing={2} sx={{ py: 10, px: 3, minWidth: 300 }}>\r\n          <Stack direction='row' justifyContent='flex-end'>\r\n            <Button variant='outlined' startIcon={<ClearAllIcon />} onClick={handleClearFilter}>Clear Filters</Button>\r\n          </Stack>\r\n\r\n          <FormControl>\r\n            <FormLabel>Filter by Status</FormLabel>\r\n            <RadioGroup value={options.statusId} onChange={(event) => onChange({ ...options, statusId: parseInt(event.target.value) })}>\r\n              <FormControlLabel value={0} control={<Radio />} label=\"None\" />\r\n              {threadStatus && threadStatus.getAllThreadStatus.map(status => (\r\n                <FormControlLabel key={status.statusId} value={status.statusId} control={<Radio />} label={status.statusLabel} />\r\n              ))}\r\n            </RadioGroup>\r\n          </FormControl>\r\n\r\n          <FormControl>\r\n            <FormLabel>Filter by Tags</FormLabel>\r\n            <RadioGroup value={options.tagId} onChange={(event) => onChange({ ...options, tagId: parseInt(event.target.value) })}>\r\n              <FormControlLabel value={0} control={<Radio />} label=\"None\" />\r\n              {threadTags && threadTags.getAllThreadTags.map(tag => (\r\n                <FormControlLabel key={tag.tagId} value={tag.tagId} control={<Radio />} label={tag.tagName} />\r\n              ))}\r\n            </RadioGroup>\r\n          </FormControl>\r\n\r\n          <FormControl>\r\n            <FormLabel>Filter by Document Type</FormLabel>\r\n            <RadioGroup value={options.typeId} onChange={(event) => onChange({ ...options, typeId: parseInt(event.target.value) })}>\r\n              <FormControlLabel value={0} control={<Radio />} label=\"None\" />\r\n              {threadTypes && threadTypes.getAllThreadTypes.map(type => (\r\n                <FormControlLabel key={type.docId} value={type.docId} control={<Radio />} label={type.docType} />\r\n              ))}\r\n            </RadioGroup>\r\n          </FormControl>\r\n\r\n          <FormControl>\r\n            <FormLabel>Sort By</FormLabel>\r\n            <RadioGroup value={options.sortBy} onChange={(event) => onChange({ ...options, sortBy: event.target.value as SortOptions })}>\r\n              <FormControlLabel value=\"crt_asc\" control={<Radio />} label=\"Date Created Ascending\" />\r\n              <FormControlLabel value=\"crt_desc\" control={<Radio />} label=\"Date Created Descending\" />\r\n              <FormControlLabel value=\"due_asc\" control={<Radio />} label=\"Date Due Ascending\" />\r\n              <FormControlLabel value=\"due_desc\" control={<Radio />} label=\"Date Due Descending\" />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Stack>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Stack from '@mui/material/Stack';\r\nimport Chip from '@mui/material/Chip';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport FolderCopyIcon from '@mui/icons-material/FolderCopy';\r\n// project imports\r\nimport FilterPopover, { FilterOptions } from './FilterPopover';\r\nimport { Thread } from '../../api/threads/types';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n\r\n\r\ninterface EmailListProps {\r\n  mode: string;\r\n  compose: boolean;\r\n  selectedId: string | null;\r\n  mails?: Thread[];\r\n  onRefresh: () => void;\r\n  onComposeThread: () => void;\r\n  onThreadClick: (threadId: string) => void;\r\n}\r\n\r\nconst emptyMessages: { [key: string]: { title: string, sub: string }} = {\r\n  \"inbox\": {\r\n    title: \"Job Well Done!\",\r\n    sub: \"You have no active threads\"\r\n  },\r\n  \"sent\": {\r\n    title: \"Compose a thread\",\r\n    sub: \"You have no created threads\"\r\n  }\r\n}\r\n\r\nconst getTagColor = (tagName: string) => {\r\n  if (tagName === \"Top Priority\") return \"error\";\r\n  else if (tagName === \"Confidential\") return \"warning\";\r\n  return \"primary\"\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function EmailList(props: EmailListProps) {\r\n  const theme = useTheme();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [options, setOptions] = React.useState<FilterOptions>({\r\n    typeId: 0,\r\n    statusId: 0,\r\n    tagId: 0,\r\n    sortBy: \"due_desc\"\r\n  });\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const visibleRows = React.useMemo(\r\n    () =>\r\n      props.mails?.filter(mail => \r\n          (mail.status.statusId === options.statusId || options.statusId === 0) &&\r\n          (mail.docType.docId === options.typeId || options.typeId === 0) &&\r\n          (mail.threadTag?.tagId === options.tagId || options.tagId === 0))\r\n        .sort((a, b) => {\r\n          switch (options.sortBy) {\r\n            case \"crt_asc\": \r\n              return new Date(a.dateCreated).getTime() - new Date(b.dateCreated).getTime();\r\n            case \"crt_desc\":\r\n              return new Date(b.dateCreated).getTime() - new Date(a.dateCreated).getTime();\r\n            case \"due_asc\":\r\n              return new Date(a.dateDue).getTime() - new Date(b.dateDue).getTime();\r\n            default:\r\n              return new Date(b.dateDue).getTime() - new Date(a.dateDue).getTime();\r\n          }\r\n        })\r\n        .slice(\r\n          page * rowsPerPage,\r\n          page * rowsPerPage + rowsPerPage,\r\n        ),\r\n    [props.mails, options, page, rowsPerPage],\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadOverlay open={props.mails === undefined} />\r\n      <Stack direction='row' spacing={2} alignItems='center' sx={{ mb: 3 }}>\r\n        {props.mode !== \"completed\" && (\r\n          <Button \r\n            variant='contained' \r\n            endIcon={<AddIcon />} \r\n            disabled={props.compose}\r\n            onClick={props.onComposeThread}\r\n          >\r\n              Compose\r\n          </Button>\r\n        )}\r\n        \r\n        <IconButton onClick={props.onRefresh}>\r\n          <RefreshIcon />\r\n        </IconButton>\r\n        <FilterPopover options={options} onChange={option => setOptions(option)} />\r\n      </Stack>\r\n      \r\n      <Paper sx={{ width: '100%' }}>\r\n        <List \r\n          sx={{ \r\n            width: '100%', \r\n            maxHeight: 'calc(100vh - 220px)', \r\n            overflowY: 'auto',\r\n            \"::-webkit-scrollbar\": {\r\n              height: \"8px\",\r\n              width: \"8px\"\r\n            },\r\n\r\n            /* Track */\r\n            \"::-webkit-scrollbar-track\": {\r\n                background: theme.palette.grey[300] \r\n            },\r\n            \r\n            /* Handle */\r\n            \"::-webkit-scrollbar-thumb\": {\r\n                background: theme.palette.secondary.main\r\n            },\r\n            \r\n            /* Handle on hover */\r\n            \"::-webkit-scrollbar-thumb:hover\": {\r\n                background: theme.palette.primary.dark\r\n            }\r\n          }}>\r\n\r\n          {props.mails && props.mails.length === 0 && (\r\n            <Box sx={{ display: 'flex', height: 300, justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n              <FolderCopyIcon color='secondary' sx={{ fontSize: 64, mb: 1 }} />\r\n              <Typography variant=\"subtitle1\">\r\n                  {emptyMessages[props.mode].title}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {emptyMessages[props.mode].sub}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          \r\n          {visibleRows && visibleRows.map(msg => (\r\n              <React.Fragment key={msg.refId}>\r\n                <ListItemButton selected={Boolean(props.selectedId) && msg.refId === props.selectedId} alignItems=\"flex-start\" onClick={() => props.onThreadClick(msg.refId)}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      {`${msg.author.firstName.charAt(0)}${msg.author.lastName.charAt(0)}`}\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText\r\n                    primary={\r\n                      <Box sx={{ mb: 2 }}>\r\n                          <Typography variant='body1' gutterBottom>\r\n                              {msg.subject}\r\n                          </Typography>\r\n                          <div>\r\n                            <Typography\r\n                              sx={{ display: 'inline' }}\r\n                              component=\"span\"\r\n                              variant=\"subtitle2\"\r\n                              color=\"text.primary\"\r\n                            >\r\n                              {props.mode === 'regionInbox' ? msg.recipient.sectionOffice.officeName : `${msg.author.firstName} ${msg.author.lastName}`}\r\n                            </Typography>\r\n                            {` — ${msg.docType.docType} request For ${msg.purpose.purposeName}.`}\r\n                          </div>\r\n                      </Box>\r\n                    } \r\n                    secondary={\r\n                      <Box sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        justifyContent: 'space-between'\r\n                      }}>\r\n                        <div>\r\n                          <Chip color={msg.completed ? 'success' : 'info'} label={msg.status.statusLabel} size='small' sx={{ fontSize: 10 }} />\r\n                          \r\n                          {msg.threadTag && (\r\n                            <Chip color={getTagColor(msg.threadTag.tagName)} label={msg.threadTag.tagName} size='small' sx={{ fontSize: 10 }} />\r\n                          )}\r\n                        </div>\r\n                        <Typography variant='caption'>\r\n                          {`Due at ${formatInboxDate(msg.dateDue)}`}\r\n                        </Typography>\r\n                      </Box>\r\n                    }\r\n                  />\r\n                </ListItemButton>\r\n                <Divider variant=\"inset\" component=\"li\" />\r\n              </React.Fragment>\r\n          ))}\r\n        </List>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 20, 30]}\r\n          component=\"div\"\r\n          count={props.mails ? props.mails\r\n                  .filter(mail => \r\n                    (mail.status.statusId === options.statusId || options.statusId === 0) &&\r\n                    (mail.docType.docId === options.typeId || options.typeId === 0) &&\r\n                    (mail.threadTag?.tagId === options.tagId || options.tagId === 0)).length : 0}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\ninterface LinkDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (name: string, link: string) => void;\r\n}\r\n\r\nexport default function LinkDialog(props: LinkDialogProps) {\r\n  const [name, setName] = React.useState<string>(\"\");\r\n  const [link, setLink] = React.useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    props.onSubmit(name, link);\r\n    setLink(\"\");\r\n  }\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.onClose} maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit} >\r\n            <DialogTitle>Add Link</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"name\"\r\n                    label=\"File Name\"\r\n                    fullWidth\r\n                    value={name}\r\n                    onChange={(event) => setName(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    name=\"link\"\r\n                    label=\"File Link\"\r\n                    type=\"url\"\r\n                    fullWidth\r\n                    value={link}\r\n                    onChange={(event) => setLink(event.target.value)}\r\n                    variant=\"standard\"\r\n                    sx={{ minWidth: 300 }}\r\n                    required\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button type='submit'>Add Link</Button>\r\n            </DialogActions>\r\n        </form>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Chip from '@mui/material/Chip';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n// icons\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\n// project imports\r\nimport LinkDialog from './AddLinkDialog';\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n// api\r\nimport { useMutation } from '@apollo/client';\r\nimport axios from 'axios';\r\nimport { SEND_THREAD_MESSAGE } from '../../api/threads';\r\n\r\n\r\nexport interface MessageInput {\r\n    message: string;\r\n    files: File[];\r\n    links: {\r\n        name: string;\r\n        link: string;\r\n    }[];\r\n}\r\n\r\nexport interface MessageCreateInput {\r\n    message: string;\r\n    senderId: string;\r\n    threadId: string;\r\n    files: Pick<MessageFiles, \"fileName\" | \"fileUrl\" | \"fileType\">[]\r\n}\r\n\r\ninterface ReplyBoxProps {\r\n    userId: string;\r\n    threadId?: string;\r\n    attached?: boolean;\r\n    onChange?: (data: MessageInput) => void;\r\n    onSubmit?: () => void;\r\n}\r\n\r\nexport default function ReplyBox({ userId, threadId, attached, onChange, onSubmit }: ReplyBoxProps) {\r\n  const [sendThreadMessage] = useMutation<{ sendMessage: Messages }, { data: MessageCreateInput }>(SEND_THREAD_MESSAGE);\r\n  const [open, setOpen] = React.useState<boolean>(false);\r\n  const [attachments, setAttachments] = React.useState<string[]>([]);\r\n  const [formData, setFormData] = React.useState<MessageInput>({\r\n    message: \"\",\r\n    files: [],\r\n    links: []\r\n  })\r\n  const [formError, setFormError] = React.useState<string>();\r\n\r\n  React.useEffect(() => {\r\n    const fileNames = formData.files.map(file => file.name);\r\n    setAttachments(fileNames.concat(formData.links.map(link => link.name)))\r\n  }, [formData, onChange]);\r\n\r\n  React.useEffect(() => {\r\n    if (onChange) onChange(formData);\r\n  }, [formData, onChange])\r\n\r\n  const handleMessageTextChange = (event: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, message: event.target.value });\r\n\r\n  const handleAddFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) \r\n        setFormData({ ...formData, files: [ ...formData.files, event.target.files[0] ] });\r\n  }\r\n\r\n  const handleAddLink = (name: string, link: string) => {\r\n    setFormData({ ...formData, links: [ ...formData.links, { name, link } ] });\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleDelete = (name: string) => {\r\n    const link = formData.links.find(l => l.name === name);\r\n    const file = formData.files.find(f => f.name === name);\r\n\r\n    if (link) setFormData({ ...formData, links: formData.links.filter(l => l.name !== name) });\r\n    if (file) setFormData({ ...formData, files: formData.files.filter(f => f.name !== name) });\r\n  }\r\n\r\n  const handleCloseSnackbar = () => setFormError(undefined);\r\n\r\n  const handleSendThreadMessage = async () => {\r\n    // validation\r\n    if (!threadId) return\r\n\r\n    if (attached && formData.files.length === 0 && formData.links.length === 0) {\r\n        setFormError(\"Attached file is required.\");\r\n        return\r\n    }\r\n\r\n    // create initial message\r\n    let uploadedFiles: MessageFiles[] = [];\r\n    let insertedLinks: MessageFiles[] = [];\r\n\r\n    // upload files if any\r\n    if (formData.files.length > 0) {\r\n        const form = new FormData();\r\n        formData.files.forEach((file) => {\r\n            form.append(\"files\", file);\r\n        })\r\n\r\n        try {\r\n            const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n            uploadedFiles = result.data.files;\r\n        } catch (err) {\r\n            setFormError((err as Error).message);\r\n            return\r\n        }\r\n    }\r\n\r\n    // arrange links if any\r\n    if (formData.links.length > 0) {\r\n        insertedLinks = formData.links.map(link => ({\r\n            fileName: link.name,\r\n            fileType: \"url\",\r\n            fileUrl: link.link\r\n        }))\r\n    }\r\n\r\n    // combine link array\r\n    const messageFiles = uploadedFiles.concat(insertedLinks);\r\n\r\n    // send first message\r\n    try {\r\n        await sendThreadMessage({ variables: { data: {\r\n            message: formData.message,\r\n            files: messageFiles,\r\n            senderId: userId,\r\n            threadId: threadId\r\n        }}})\r\n\r\n        // reset form\r\n        setFormData({\r\n            message: \"\",\r\n            files: [],\r\n            links: []\r\n        })\r\n\r\n        if (onSubmit) onSubmit();\r\n    } catch (err) {\r\n        setFormError((err as Error).message);\r\n        return\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', backgroundColor: '#F2F3F4', position: 'relative' }}>\r\n        <TextField \r\n            name='message'\r\n            value={formData.message}\r\n            onChange={handleMessageTextChange}\r\n            multiline\r\n            rows={4}\r\n            fullWidth\r\n        />\r\n        <Stack \r\n            direction='row' \r\n            justifyContent='space-between' \r\n            alignItems='center' \r\n            sx={{ position: 'absolute', bottom: 0, left: 0, right: 0, p: 1 }}\r\n        >\r\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title='Upload File'>\r\n                    <IconButton component=\"label\">\r\n                        <FileUploadIcon />\r\n                        <input type=\"file\" onChange={handleAddFiles} hidden />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title='Insert Link'>\r\n                    <IconButton onClick={() => setOpen(true)}>\r\n                        <InsertLinkIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Box sx={{ display: 'flex', flexDirection: 'row', maxWidth: 500, overflowX: 'auto' }}>\r\n                    {attachments.map(name => (\r\n                        <Chip\r\n                            key={name}\r\n                            label={name}\r\n                            sx={{ mx: 1 }}\r\n                            onDelete={() => handleDelete(name)}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            {threadId && (\r\n                <Button \r\n                    variant='contained' \r\n                    size='large' \r\n                    endIcon={<ReplyIcon />}\r\n                    onClick={handleSendThreadMessage}\r\n                    disabled={formData.files.length === 0 && formData.links.length === 0 && formData.message.length === 0}\r\n                >\r\n                    Reply\r\n                </Button>\r\n            )}\r\n        </Stack>\r\n\r\n        <LinkDialog open={open} onClose={() => setOpen(false)} onSubmit={handleAddLink} />\r\n\r\n        <Snackbar open={formError !== undefined} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n            <Alert onClose={handleCloseSnackbar} severity=\"error\" sx={{ width: '100%' }}>\r\n                {formError && formError}\r\n            </Alert>\r\n        </Snackbar>\r\n    </Box>\r\n  )\r\n}","import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\n// types\r\nimport { Messages } from '../../api/threads/types';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n  const target = new Date(date);\r\n  return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function MessageCard({ content, sender }: { content: Messages, sender: boolean }) {\r\n  if (sender) return (\r\n    <Card>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar sx={{ backgroundColor: 'red' }}>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        \r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n          {content.files.map(file => (\r\n            <Chip \r\n              key={file.fileId} \r\n              label={file.fileName} \r\n              variant=\"outlined\" \r\n              component=\"a\" \r\n              href={file.fileUrl} \r\n              target='_blank' \r\n              clickable \r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ border: '1px solid #989898', borderRadius: 3 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar>\r\n            {`${content.sender.firstName.charAt(0)}${content.sender.lastName.charAt(0)}`}\r\n          </Avatar>\r\n        }\r\n        title={content.sender.firstName + ' ' + content.sender.lastName}\r\n        subheader={content.sender.role.roleName}\r\n        action={\r\n          <Typography variant='body2'>\r\n            {formatInboxDate(content.dateSent)}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          {content.message}\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n            {content.files.map(file => (\r\n              <Chip \r\n                key={file.fileId} \r\n                label={file.fileName} \r\n                variant=\"outlined\" \r\n                component=\"a\" \r\n                href={file.fileUrl} \r\n                target='_blank' \r\n                clickable \r\n              />\r\n            ))}\r\n        </Stack>\r\n      </CardContent>\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\n// mui\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport SignatureCanvas from 'react-signature-canvas';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\n// api \r\nimport axios from 'axios';\r\n\r\ninterface SignatureDialogProps {\r\n    open: boolean;\r\n    imageUrl: string | null;\r\n    onClose: () => void;\r\n    onSubmit: (url: string) => void;\r\n}\r\n\r\nexport default function SignatureDialog({ open, imageUrl, onSubmit, onClose }: SignatureDialogProps) {\r\n    const sigPad = React.useRef<SignatureCanvas | null>(null);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n\r\n    const handleSubmitSignature = () => {\r\n        if (sigPad.current) {\r\n            onSubmit(sigPad.current.getTrimmedCanvas().toDataURL('image/png'));\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        if (sigPad.current) {\r\n            sigPad.current.clear();\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    const handleUploadSignature = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            const form = new FormData();\r\n            form.append(\"files\", event.target.files[0])\r\n\r\n            try {\r\n                const result = await axios.post(process.env.REACT_APP_MEDIA_URL as string, form);\r\n                onSubmit(result.data.files[0].fileUrl);\r\n                onClose();\r\n            } catch (err) {\r\n                setError((err as Error).message);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth='md'>\r\n            <DialogTitle>Add Signature</DialogTitle>\r\n            <DialogContent>\r\n                {error && (\r\n                    <Alert severity='error'>{error}</Alert> \r\n                )}\r\n\r\n                <SignatureCanvas \r\n                    penColor='black'\r\n                    ref={sigPad}\r\n                    canvasProps={{width: 500, height: 200 }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button component='label'>\r\n                    Upload Signature\r\n\r\n                    <input type='file' onChange={handleUploadSignature} hidden />\r\n                </Button>\r\n                <Button onClick={handleSubmitSignature}>Submit Signature</Button>\r\n                <Button color='error' onClick={handleCancel}>Cancel</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}","import {\r\n    Document,\r\n    Page,\r\n    View,\r\n    Text,\r\n    Font,\r\n    StyleSheet,\r\n    Image\r\n} from '@react-pdf/renderer';\r\nimport { OfficeSections, Thread } from '../../api/threads/types';\r\nimport { Form2309Data } from '../../pages/threads/RequestDetails';\r\n\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nconst formatOfficeSections = (recipient: OfficeSections) => {\r\n    if (recipient.sectionName === \"default\") return recipient.sectionOffice.officeName;\r\n    else return `${recipient.sectionName} (${recipient.sectionOffice.refNum})`\r\n}\r\n\r\nFont.register({\r\n    family: 'Oswald',\r\n    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'\r\n});\r\n\r\nexport default function Form2309({ thread, details }: { thread: Thread, details: Form2309Data }) { \r\n    \r\n    return (\r\n        <Document>\r\n            <Page size='A4' style={styles.body}>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableColLeft}>\r\n                            <Text style={styles.tableCellLeft}>BIR</Text>\r\n                            <Text style={styles.tableCellLeft}>FORM 2309</Text>\r\n                            <Text style={styles.tableCellLeft}>(REVISED OCTOBER, 1971)</Text>\r\n                        </View>\r\n                        <View style={styles.tableColRight}>\r\n                            <Text style={styles.tableCellRight}>BUREAU OF INTERNAL REVENUE</Text>\r\n                            <Text style={styles.tableCellRight}>Revenue Region No. 6 - Manila</Text>\r\n                            <Text style={styles.tableCellRight}>{`REFERENCE SLIP # ${thread.refSlipNum}`}</Text>\r\n                            <Text style={styles.tableCellTag}>{thread.threadTag ? thread.threadTag.tagName.toUpperCase() : ''}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>TO:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.recipientList.map(recipient => formatOfficeSections(recipient)).join(', ')}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DATE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateCreated)}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>SUBJECT:</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.subject}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FOR:</Text>\r\n                            <Text style={styles.tableCellLeft}>{thread.purposeNotes ? thread.purposeNotes : thread.purpose.purposeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>DEADLINE:</Text>\r\n                            <Text style={styles.tableCellLeft}>{formatInboxDate(thread.dateDue)}</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                    <View style={styles.purposeCol}>\r\n                    <Text style={styles.tableCellLeftBold}>REMARKS (or additional instructions):</Text>\r\n                    <Text style={styles.tableCellLeft}>{details.remarks}</Text>\r\n                    </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.recipientCol}>\r\n                            <Text style={styles.tableCellLeftBold}>FROM:</Text>\r\n                            {details.signatureUrl ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src={details.signatureUrl} />\r\n                                </View>\r\n                            ) : thread.author.signImage ? (\r\n                                <View style={styles.signatureContainer}>\r\n                                    <Image style={styles.signatureImage} src={thread.author.signImage} />\r\n                                </View>\r\n                            ) : (\r\n                                <Text style={styles.emptyCell}></Text>\r\n                            )}\r\n                            <Text style={styles.tableCellCenter}>{thread.author.firstName + ' ' + thread.author.lastName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.role.roleName}</Text>\r\n                            <Text style={styles.tableCellCenterSmall}>{thread.author.officeSection.sectionOffice.officeName}</Text>\r\n                        </View>\r\n                        <View style={styles.dateCol}>\r\n                            <Text style={styles.tableCellLeftBold}>{thread.author.officeSection.sectionOffice.refNum}</Text>\r\n                        </View>\r\n                </View>\r\n                </View>\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.purposeCol}>\r\n                            <Text style={styles.tableCellLeftBoldSmall}>NOTE: This slip must be filled with the papers to which it is attached.</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    );\r\n}\r\n  \r\nconst styles = StyleSheet.create({\r\n    body: {\r\n        paddingTop: 15,\r\n        paddingBottom: 15,\r\n        paddingRight: '50%',\r\n        paddingLeft: 15\r\n    },\r\n    table: { \r\n        width: \"auto\", \r\n        borderStyle: \"solid\", \r\n        borderWidth: 1,\r\n        padding: 2\r\n    },\r\n    tableRow: { \r\n        margin: \"auto\", \r\n        marginTop: 2,\r\n        flexDirection: \"row\" \r\n    }, \r\n    tableColRight: { \r\n        width: \"60%\"\r\n    },\r\n    tableColLeft: { \r\n        width: \"40%\"\r\n    },\r\n    recipientCol: { \r\n        width: \"70%\"\r\n    },\r\n    dateCol: { \r\n        width: \"30%\"\r\n    },\r\n    purposeCol: { \r\n        width: \"100%\"\r\n    },\r\n    tableCellLeft: { \r\n        margin: 2,\r\n        fontSize: 9,\r\n        textAlign: \"left\"\r\n    },\r\n    emptyCell: { \r\n        height: 30\r\n    },\r\n    tableCellLeftBold: { \r\n        margin: 2,\r\n        fontSize: 9,\r\n        textAlign: \"left\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    tableCellLeftBoldSmall: { \r\n        margin: 2,\r\n        fontSize: 6,\r\n        textAlign: \"left\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    tableCellRight: { \r\n        margin: 2,\r\n        fontSize: 9,\r\n        textAlign: \"right\"\r\n    },\r\n    tableCellTag: { \r\n        margin: 2,\r\n        fontSize: 9,\r\n        textAlign: \"right\",\r\n        color: \"red\"\r\n    },\r\n    tableCellCenter: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n    tableCellCenterSmall: { \r\n        margin: 2,\r\n        fontSize: 8,\r\n        textAlign: \"center\"\r\n    },\r\n    signatureContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\"\r\n    },\r\n    signatureImage: {\r\n        width: 60,\r\n        height: 30\r\n    }\r\n});\r\n  ","import React from 'react';\r\nimport { DocumentPurpose, DocumentTypes, Thread, ThreadTags, UserAccounts } from '../../api/threads/types';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\nimport Chip from '@mui/material/Chip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// icons\r\nimport SaveIcon from '@mui/icons-material/Save';\r\n// project imports\r\nimport SignatureDialog from './Signature';\r\nimport { LoadOverlay } from '../../components/Loaders';\r\n// renderer\r\nimport { PDFDownloadLink } from '@react-pdf/renderer';\r\nimport Form2309 from '../../components/Form2309';\r\nimport axios from 'axios';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { UPLOAD_SIGNATURE } from '../../api/offices';\r\nimport { \r\n    GET_ALL_THREAD_PURPOSE, \r\n    GET_ALL_THREAD_TAGS, \r\n    GET_ALL_THREAD_TYPES, \r\n    UPDATE_THREAD\r\n} from '../../api/threads';\r\n\r\n\r\n\r\nexport interface Form2309Data {\r\n    subject: string;\r\n    remarks: string;\r\n    signatureUrl: string | null;\r\n}\r\n\r\ninterface Queue {\r\n    [key: string]: number\r\n}\r\n\r\ninterface ThreadUpdate {\r\n    subject: string;\r\n    docTypeId: number;\r\n    purposeId: number;\r\n    tagId: number | null;\r\n    purposeNotes: string;\r\n    dateDue: string;\r\n}\r\n\r\nexport default function RequestDetails({ userId, thread, onGenerate }: { userId: string, thread: Thread, onGenerate: () => void }) {\r\n    // Queries\r\n    const { data: threadTypes } = useQuery<{ getAllThreadTypes: DocumentTypes[] }>(GET_ALL_THREAD_TYPES);\r\n    const { data: threadPurposes } = useQuery<{ getAllThreadPurpose: DocumentPurpose[] }>(GET_ALL_THREAD_PURPOSE);\r\n    const { data: threadTags } = useQuery<{ getAllThreadTags: ThreadTags[] }>(GET_ALL_THREAD_TAGS);\r\n\r\n    // Mutations\r\n    const [uploadSignature, { error: signError }] = useMutation<{ updateSignature: UserAccounts }>(UPLOAD_SIGNATURE);\r\n    const [updateThread, { error: updateError }] = useMutation<{ updateThread: Thread[] }>(UPDATE_THREAD);\r\n    const [formData, setFormData] = React.useState<Form2309Data>({\r\n        subject: '',\r\n        remarks: '',\r\n        signatureUrl: null\r\n    });\r\n    const [threadUpdate, setThreadUpdate] = React.useState<ThreadUpdate>({\r\n        subject: thread.subject,\r\n        dateDue: new Date(thread.dateDue).toISOString(),\r\n        tagId: thread.threadTag ? thread.threadTag.tagId : null,\r\n        purposeNotes: thread.purposeNotes ? thread.purposeNotes : '',\r\n        docTypeId: thread.docType.docId,\r\n        purposeId: thread.purpose.purposeId\r\n      })\r\n    const [types, setTypes] = React.useState<Queue>();\r\n    const [purposes, setPurposes] = React.useState<Queue>();\r\n    const [upload, setUpload] = React.useState<File | null>(null);\r\n    const [open, setOpen] = React.useState<boolean>(false);\r\n    const [updated, setUpdated] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        if (threadTypes && threadPurposes) {\r\n            let typesObject: Queue = {};\r\n            threadTypes.getAllThreadTypes.forEach(type => {\r\n                typesObject[type.docType] = type.docId;\r\n            })\r\n            setTypes(typesObject);\r\n    \r\n            let purposesObject: Queue = {};\r\n            threadPurposes.getAllThreadPurpose.forEach(purpose => {\r\n                purposesObject[purpose.purposeName] = purpose.purposeId;\r\n            })\r\n            setPurposes(purposesObject);\r\n    \r\n        }\r\n      }, [threadTypes, threadPurposes]);\r\n\r\n    React.useEffect(() => {\r\n        setFormData(state => ({\r\n            ...state,\r\n            subject: thread.subject,\r\n            remarks: thread.messages[0].message\r\n        }))\r\n    }, [thread])\r\n\r\n    React.useEffect(() => {\r\n        const uploadForm = async () => {\r\n            if (upload) {\r\n                const form = new FormData();\r\n                form.append(\"form\", upload);\r\n                form.append(\"requestId\", thread.refId);\r\n\r\n                try {\r\n                    const result = await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                    window.open(result.data.fileUrl, \"_blank\");\r\n\r\n                    onGenerate();\r\n                } catch (err) {\r\n                    console.log(err);\r\n                    return\r\n                }\r\n\r\n                setUpload(null);\r\n            }\r\n        }\r\n\r\n        uploadForm();\r\n    }, [upload, onGenerate, thread.refId]);\r\n\r\n    React.useEffect(() => {\r\n        setThreadUpdate(state => ({ ...state, subject: formData.subject }))\r\n    }, [formData.subject])\r\n\r\n    if (!types || !purposes) return <LoadOverlay open={true} />\r\n\r\n    const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const handleThreadTypeChange = (_: any, newValue: string | null) => setThreadUpdate({ ...threadUpdate, docTypeId: types[newValue as string] });\r\n\r\n    const handleThreadPurposeChange = (_: any, newValue: string | null) => setThreadUpdate({ ...threadUpdate, purposeId: purposes[newValue as string] });\r\n\r\n    const handlePurposeNotesChange = (_: any, newValue: string) => setThreadUpdate({ ...threadUpdate, purposeNotes: newValue });\r\n\r\n    const handleTegChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = parseInt(event.target.value, 10);\r\n        if (value === 0) setThreadUpdate({ ...threadUpdate, tagId: null });\r\n        else setThreadUpdate({ ...threadUpdate, tagId: value });\r\n    }\r\n\r\n    const handleDateDueChange = (date: Dayjs | null) => {\r\n        if (date) setThreadUpdate({ ...threadUpdate, dateDue: date.toISOString() });\r\n    }\r\n    \r\n\r\n    const handleUploadForm = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) setUpload(event.target.files[0]);\r\n    }\r\n\r\n    const handleGenerateForm = async (blob: Blob | null, url: string | null) => {\r\n        if (url && blob) {\r\n            window.open(url, \"_blank\");\r\n\r\n            const file = new File([blob], `${thread.refSlipNum}.pdf`, {\r\n                type: \"application/pdf\",\r\n            });\r\n\r\n            const form = new FormData();\r\n            form.append(\"form\", file);\r\n            form.append(\"requestId\", thread.refId);\r\n\r\n            try {\r\n                await axios.post(process.env.REACT_APP_FORMS_URL as string, form);\r\n                onGenerate();\r\n            } catch (err) {\r\n                console.log(err);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleToggleSignature = () => setOpen(!open);\r\n\r\n    const handleSubmitESignature = async (url: string) => {\r\n        setFormData({ ...formData, signatureUrl: url });\r\n        await uploadSignature({\r\n            variables: {\r\n                userId: userId,\r\n                signImage: url\r\n            }\r\n        })\r\n        setUpdated(true);\r\n    }\r\n\r\n    const handleRemoveSignature = async () => {\r\n        setFormData({ ...formData, signatureUrl: null });\r\n        await uploadSignature({\r\n            variables: {\r\n                userId: userId,\r\n                signImage: null\r\n            }\r\n        })\r\n        setUpdated(true);\r\n    }\r\n\r\n    const handleUpdateThread = async () => {\r\n        await updateThread({ variables: { data: { ...threadUpdate, refNum: thread.refSlipNum }}});\r\n        onGenerate();\r\n        setUpdated(true);\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={3} sx={{ p: 2 }}>\r\n\r\n            <Stack direction='row' spacing={1} justifyContent='flex-end' alignItems='center'>\r\n                <Button variant='contained' startIcon={<SaveIcon />} onClick={handleUpdateThread}>Save Changes</Button>\r\n                <Button variant='outlined' onClick={handleToggleSignature}>Add Signature</Button>\r\n                {thread.author.signImage && (\r\n                    <Button variant='outlined' color='error' onClick={handleRemoveSignature}>Remove Signature</Button>\r\n                )}\r\n            </Stack>\r\n\r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Subject' variant='outlined' sx={{ width: 80 }} /> \r\n                <TextField\r\n                    multiline\r\n                    fullWidth\r\n                    variant='standard'\r\n                    name='subject'\r\n                    value={formData.subject}\r\n                    onChange={handleTextChange}\r\n                />\r\n            </Stack>\r\n\r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Purpose' variant='outlined' sx={{ width: 80 }} />\r\n                <Autocomplete\r\n                    freeSolo\r\n                    fullWidth\r\n                    defaultValue={thread.purpose.purposeName}\r\n                    onInputChange={handlePurposeNotesChange}\r\n                    onChange={handleThreadPurposeChange}\r\n                    options={Object.keys(purposes)}\r\n                    renderInput={(params) => \r\n                        <TextField \r\n                            {...params} \r\n                            variant='standard' \r\n                        />\r\n                    }\r\n                />\r\n            </Stack>\r\n            \r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Type' variant='outlined' sx={{ width: 80 }} />\r\n                <Autocomplete\r\n                    freeSolo\r\n                    fullWidth\r\n                    defaultValue={thread.docType.docType}\r\n                    onChange={handleThreadTypeChange}\r\n                    options={Object.keys(types)}\r\n                    renderInput={(params) => \r\n                        <TextField \r\n                            {...params} \r\n                            variant='standard' \r\n                        />\r\n                    }\r\n                />\r\n            </Stack>\r\n\r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Tag' variant='outlined' sx={{ width: 80 }} />\r\n                <TextField\r\n                    fullWidth\r\n                    name='tagId'\r\n                    variant='standard'\r\n                    select\r\n                    value={threadUpdate.tagId ? threadUpdate.tagId : 0}\r\n                    onChange={handleTegChange}\r\n                >\r\n                    <MenuItem value={0}>None</MenuItem>\r\n                    {threadTags && threadTags.getAllThreadTags.map(tag => (\r\n                        <MenuItem key={tag.tagId} value={tag.tagId}>{tag.tagName}</MenuItem>\r\n                    ))}\r\n                </TextField>\r\n            </Stack>\r\n\r\n            <Stack direction='row' spacing={2}>\r\n                <Chip label='Remarks' variant='outlined' sx={{ width: 80 }} /> \r\n                <TextField\r\n                    multiline\r\n                    fullWidth\r\n                    variant='standard'\r\n                    name='remarks'\r\n                    value={formData.remarks}\r\n                    onChange={handleTextChange}\r\n                />\r\n            </Stack>\r\n\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                <DatePicker \r\n                    label=\"Date Due\"\r\n                    views={[\"year\", \"month\", \"day\"]}\r\n                    value={dayjs(threadUpdate.dateDue)} \r\n                    onChange={handleDateDueChange} \r\n                    format=\"MMMM DD, YYYY\"\r\n                />\r\n            </LocalizationProvider>\r\n\r\n            <PDFDownloadLink document={<Form2309 thread={thread} details={formData} />} fileName={`${thread.subject}.pdf`}>\r\n                {({ blob, url, loading, error }) => (\r\n                     <Button \r\n                        fullWidth \r\n                        onClick={() => handleGenerateForm(blob, url)}\r\n                        variant='contained'>\r\n                            Generate Form 2309\r\n                    </Button>\r\n                )}\r\n            </PDFDownloadLink>\r\n           \r\n            <Button \r\n                fullWidth \r\n                disabled={upload !== null}\r\n                component='label'\r\n                variant='outlined'>\r\n                    Upload Form 2309\r\n\r\n                    <input type='file' hidden onChange={handleUploadForm} />\r\n            </Button>\r\n\r\n            <SignatureDialog \r\n                open={open}\r\n                imageUrl={formData.signatureUrl}\r\n                onSubmit={handleSubmitESignature}\r\n                onClose={handleToggleSignature}\r\n            />\r\n\r\n            <Snackbar open={updated} autoHideDuration={6000} onClose={() => setUpdated(false)}>\r\n                <Alert onClose={() => setUpdated(false)} severity={updateError || signError ? \"error\" : \"success\"} sx={{ width: '100%' }}>\r\n                    {updateError || signError ? \"Failed to save changes.\" : \"Saved changes successfully!\"}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport FolderIcon from '@mui/icons-material/Folder';\r\nimport Link from '@mui/material/Link';\r\n// types\r\nimport { MessageFiles, Messages } from '../../api/threads/types';\r\n\r\n\r\nexport default function ThreadDirectory(props: { messages: Messages[], reqForm?: string }) {\r\n    const [files, setFiles] = React.useState<MessageFiles[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        let msgFiles: MessageFiles[] = [];\r\n        props.messages.forEach(msg => {\r\n            msgFiles = msgFiles.concat(msg.files)\r\n        });\r\n        setFiles(msgFiles);\r\n\r\n    }, [props.messages])\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n             <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Shared Files\r\n            </Typography>\r\n            <List>\r\n              {props.reqForm && (\r\n                <>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={props.reqForm} target='_blank'>\r\n                                    Form 2309\r\n                                </Typography>\r\n                            }\r\n                            secondary='application/PDF'\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </>\r\n              )}\r\n\r\n              {files.map(file => (\r\n                <React.Fragment key={file.fileId}>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FolderIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Typography component={Link} variant='body1' href={file.fileUrl} target='_blank'>\r\n                                    {file.fileName}\r\n                                </Typography>\r\n                            }\r\n                            secondary={file.fileType}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                </React.Fragment>\r\n              ))}\r\n            </List>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Stack from '@mui/material/Stack';\r\nimport Alert from '@mui/material/Alert';\r\nimport { ThreadHistory } from '../../api/threads/types';\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\nexport default function History(props: { history: ThreadHistory[] }) {\r\n\r\n    const handleSeverity = (status: string | null) => {\r\n        if (status && status.includes(\"Closed\")) return \"success\";\r\n        else if (status && status.includes(\"Progress\")) return \"info\";\r\n        else if (status && status.includes(\"Approval\")) return \"warning\";\r\n        else return \"info\"\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', p: 2 }}>\r\n            <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\r\n                Request History\r\n            </Typography>\r\n            <Stack spacing={2}>\r\n                {props.history.map((event, index) => (\r\n                    <Alert key={index} severity={handleSeverity(event.status ? event.status.statusLabel : null)}>\r\n                        {`${event.historyLabel} ${event.status ? `to ${event.status.statusLabel}`: ''} at ${formatInboxDate(event.dateCreated)}`}\r\n                    </Alert>\r\n                ))}\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\n// mui\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport Alert from '@mui/material/Alert';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport { useTheme } from '@mui/material/styles';\r\n// icons\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\n// project imports\r\nimport { LoadOverlay } from '../../components/Loaders';\r\nimport MessageCard from './MessageCard';\r\nimport RequestDetails from './RequestDetails';\r\nimport ReplyBox from './ReplyBox';\r\nimport ThreadDirectory from './Directory';\r\nimport ThreadHistory from './History';\r\nimport { DocumentStatus, SubscriptionMessage, Thread } from '../../api/threads/types';\r\n// api\r\nimport { useQuery, useMutation, useSubscription } from '@apollo/client';\r\nimport { \r\n    ARCHIVE_THREAD,\r\n    GET_ALL_THREAD_STATUS, \r\n    GET_THREAD_BY_ID, \r\n    RESTORE_THREAD, \r\n    SET_MESSAGE_AS_READ, \r\n    THREAD_MESSAGES_SUBSCRIBE, \r\n    UPDATE_THREAD_STATUS\r\n} from '../../api/threads';\r\n\r\ninterface TabPaneProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nexport function TabPanel(props: TabPaneProps) {\r\n    return (\r\n        <div>\r\n            {props.value === props.index && props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst formatInboxDate = (date: string | Date) => {\r\n    const target = new Date(date);\r\n    return target.toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });\r\n}\r\n\r\ninterface ThreadListProps {\r\n    userId: string;\r\n    threadId: string;\r\n    onUpdate: () => void;\r\n}\r\n\r\nexport default function ThreadList({ userId, threadId, onUpdate }: ThreadListProps) {\r\n  const theme = useTheme();\r\n  const { data: threadData, loading, refetch } = useQuery<{ getThreadById: Thread }>(GET_THREAD_BY_ID, {\r\n    variables: { uid: threadId }\r\n  });\r\n  const { data: liveThread } = useSubscription<{ liveThread: SubscriptionMessage }>(THREAD_MESSAGES_SUBSCRIBE, {\r\n    variables: {\r\n      threadId: threadId\r\n    }\r\n  });\r\n  const { data: threadStatus } = useQuery<{ getAllThreadStatus: DocumentStatus[] }>(GET_ALL_THREAD_STATUS);\r\n  const [updateThreadStatus] = useMutation(UPDATE_THREAD_STATUS); \r\n  const [setMessageAsRead] = useMutation(SET_MESSAGE_AS_READ);\r\n  const [archiveThread] = useMutation(ARCHIVE_THREAD);\r\n  const [restoreThread] = useMutation(RESTORE_THREAD);\r\n\r\n  const [tabValue, setTableValue] = React.useState<number>(0);\r\n  const [expanded, setExpanded] = React.useState<boolean>(false);\r\n  const [statusId, setStatusId] = React.useState<number>(2);\r\n  const [attach, setAttach] = React.useState<string>('true');\r\n  const [completed, setCompleted] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    if (liveThread) refetch({ uid: liveThread.liveThread.referenceNum });\r\n  }, [liveThread, refetch])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        setStatusId(threadData.getThreadById.status.statusId);\r\n        setAttach(threadData.getThreadById.attachments ? 'true' : 'false');\r\n        setCompleted(threadData.getThreadById.completed);\r\n    }\r\n  }, [threadData])\r\n\r\n  React.useEffect(() => {\r\n    if (threadData) {\r\n        threadData.getThreadById.messages.filter(msg => msg.sender.accountId !== userId).forEach(user => {\r\n            setMessageAsRead({\r\n                variables: {\r\n                    threadId: threadData.getThreadById.refId,\r\n                    userId: user.sender.accountId\r\n                }\r\n            })\r\n        })\r\n    }\r\n  }, [threadData, userId, setMessageAsRead])\r\n\r\n  React.useEffect(() => {\r\n    refetch({ uid: threadId });\r\n    setTableValue(0);\r\n  }, [threadId, refetch])\r\n\r\n  const handleExpand = () => setExpanded(!expanded);\r\n\r\n  const handleStatusChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: attach === 'true' ? true : false,\r\n        statusId: parseInt(event.target.value)\r\n    }})\r\n\r\n    // check if completed\r\n    const completedId = [1, 3];\r\n    setCompleted(completedId.includes(parseInt(event.target.value)));\r\n\r\n    setStatusId(parseInt(event.target.value));\r\n    reloadThread();\r\n  }\r\n\r\n  const handleAttachmentChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    await updateThreadStatus({ variables: {\r\n        uid: threadId,\r\n        attachments: event.target.value === 'true' ? true : false,\r\n        statusId\r\n    }})\r\n\r\n    setAttach(event.target.value);\r\n  }\r\n\r\n  const handleArchiveThread = async () => {\r\n    await archiveThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    reloadThread();\r\n  }\r\n\r\n  const handleRestoreThread = async () => {\r\n    await restoreThread({\r\n        variables: {\r\n            threadId: threadId\r\n        }\r\n    })\r\n\r\n    reloadThread();\r\n  }\r\n\r\n  const reloadThread = () => {\r\n    refetch({ uid: threadId });\r\n    onUpdate();\r\n  }\r\n\r\n  if (loading || !threadData || !threadStatus) return <LoadOverlay open={true} />\r\n\r\n  const { subject, author, refSlipNum, dateDue, messages, recipient, dateUpdated, dateCreated, status, attachments, active, recipientUser } = threadData.getThreadById;\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n        <Box \r\n            sx={{ \r\n                width: '100%', \r\n                maxHeight: 'calc(100vh - 105px)', \r\n                overflowY: 'auto',\r\n                overflowX: 'hidden',\r\n                \"::-webkit-scrollbar\": {\r\n                    height: \"8px\",\r\n                    width: \"8px\"\r\n                },\r\n\r\n                /* Track */\r\n                \"::-webkit-scrollbar-track\": {\r\n                    background: theme.palette.grey[300] \r\n                },\r\n                \r\n                /* Handle */\r\n                \"::-webkit-scrollbar-thumb\": {\r\n                    background: theme.palette.secondary.main\r\n                },\r\n                \r\n                /* Handle on hover */\r\n                \"::-webkit-scrollbar-thumb:hover\": {\r\n                    background: theme.palette.primary.dark\r\n                }\r\n            }}\r\n        >\r\n            <Box sx={{ width: '100%', p: 2 }}>\r\n                <Stack direction='row' spacing={1} justifyContent='space-between' alignItems='center'>\r\n                    <Typography variant='body2' sx={{ fontWeight: 800 }}>\r\n                        {`Ref # ${refSlipNum}`}\r\n                    </Typography>\r\n        \r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Typography variant='body2'>{`From ${formatInboxDate(dateCreated)} to ${formatInboxDate(dateDue)}`}</Typography>\r\n                        {((userId === threadData.getThreadById.author.accountId && !threadData.getThreadById.purpose.purposeName.includes(\"Approval\")) || \r\n                           (userId !== threadData.getThreadById.author.accountId && threadData.getThreadById.purpose.purposeName.includes(\"Approval\"))) && (\r\n                            <IconButton onClick={handleExpand}>\r\n                                {expanded ? <CloseIcon /> : <TuneIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                         <IconButton onClick={reloadThread}>\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Stack>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <Stack direction='row' spacing={2} justifyContent='flex-end' sx={{ my: 2 }}>\r\n                        <TextField\r\n                            name='status'\r\n                            label='Status'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={statusId}\r\n                            onChange={handleStatusChange}\r\n                        >\r\n                            {threadStatus.getAllThreadStatus.map(status => (\r\n                                <MenuItem key={status.statusId} value={status.statusId}>{status.statusLabel}</MenuItem>\r\n                            ))}\r\n                        \r\n                        </TextField>\r\n                        <TextField\r\n                            name='attachments'\r\n                            label='Attachments'\r\n                            select\r\n                            sx={{ width: 200 }}\r\n                            value={attach}\r\n                            onChange={handleAttachmentChange}\r\n                        >\r\n                            <MenuItem value='true'>Required</MenuItem>\r\n                            <MenuItem value='false'>Not Required</MenuItem> \r\n                        </TextField>\r\n                    </Stack>\r\n                </Collapse>\r\n                <Divider sx={{ mb: 1 }} />\r\n                \r\n                {active ? (\r\n                    <Alert \r\n                        severity={completed ? \"success\" : \"info\"}\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button color='error' onClick={handleArchiveThread}>\r\n                                Cancel\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        {completed ? `This thread is complied and closed at ${formatInboxDate(dateUpdated)}.` : status.statusLabel}\r\n                    </Alert>\r\n                ) : (\r\n                    <Alert \r\n                        severity='error'\r\n                        action={userId === threadData.getThreadById.author.accountId && (\r\n                            <Button onClick={handleRestoreThread}>\r\n                                Restore\r\n                            </Button>\r\n                        )}\r\n                    >\r\n                        Archived Request\r\n                    </Alert>\r\n                )}\r\n\r\n            </Box>\r\n\r\n            <Box sx={{ px: 2 }}>\r\n                <Typography variant='body1' color='secondary'>\r\n                    {author.firstName + ' ' + author.lastName} \r\n                    <span style={{ color: 'black' }}>{' to '}</span> \r\n                    {recipientUser ? `${recipientUser.firstName} ${recipientUser.lastName} (${recipient.sectionOffice.refNum})` :\r\n                    `${recipient.sectionOffice.officeName} ${recipient.sectionName === \"default\" ? \"\" : ` — ${recipient.sectionName}`}`}\r\n                </Typography>\r\n                <Typography variant='h4'>\r\n                    {subject}\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Tabs value={tabValue} onChange={(e, value) => setTableValue(value)} sx={{ mt: 2 }}>\r\n                <Tab value={0} label=\"Conversation\" />\r\n                {threadData.getThreadById.author.accountId === userId && (\r\n                    <Tab value={1} label=\"Details\" />\r\n                )}\r\n                <Tab value={2} label=\"Files\" />\r\n                <Tab value={3} label=\"History\" />\r\n            </Tabs>\r\n           \r\n            <TabPanel index={0} value={tabValue}>\r\n                <Box sx={{ p: 2 }}>\r\n                    {messages.map(msg => (\r\n                        <Box \r\n                            key={msg.msgId} \r\n                            sx={{ \r\n                                my: 2, \r\n                                pl: msg.sender.accountId === userId ? 8 : 0,\r\n                                pr: msg.sender.accountId !== userId ? 8 : 0\r\n                            }}\r\n                        >\r\n                            <MessageCard content={msg} sender={msg.sender.accountId === userId} />\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ p: 2 }}>\r\n                    {!completed && (\r\n                        <ReplyBox userId={userId} threadId={threadId} attached={attachments} onSubmit={reloadThread} />\r\n                    )}\r\n                </Box>\r\n            </TabPanel>\r\n\r\n            {threadData.getThreadById.author.accountId === userId && (\r\n                <TabPanel index={1} value={tabValue}>\r\n                    <RequestDetails userId={userId} thread={threadData.getThreadById} onGenerate={reloadThread} />\r\n                </TabPanel>\r\n           )}\r\n\r\n            <TabPanel index={2} value={tabValue}>\r\n                <ThreadDirectory messages={threadData.getThreadById.messages} reqForm={threadData.getThreadById.reqForm} />\r\n            </TabPanel>\r\n\r\n            <TabPanel index={3} value={tabValue}>\r\n                <ThreadHistory history={threadData.getThreadById.history} />\r\n            </TabPanel>\r\n        </Box>\r\n    </Paper>\r\n  )\r\n}"],"names":["generateOfficeCode","officeCode","sectionCode","concat","CreateThread","props","theme","useTheme","tempRefNum","useQuery","GET_TEMP_REF_NUM","variables","authorId","userId","fetchPolicy","data","officeSections","GET_BIR_OFFICES","threadTypes","GET_ALL_THREAD_TYPES","threadPurposes","GET_ALL_THREAD_PURPOSE","threadTags","GET_ALL_THREAD_TAGS","_useQuery6","GET_USER_ACCOUNTS_BY_OFFICES","officeIds","threadOfficers","refetchOfficers","refetch","_useMutation","useMutation","CREATE_THREAD","createThread","_slicedToArray","_useMutation3","SEND_THREAD_MESSAGE","sendThreadMessage","_React$useState","React","_React$useState2","offices","setOffices","_React$useState3","_React$useState4","types","setTypes","_React$useState5","_React$useState6","purposes","setPurposes","_React$useState7","_React$useState8","officers","setOfficers","_React$useState9","subject","statusId","attachments","actionable","dateDue","Date","toISOString","tagId","recipientId","recipientUserId","purposeNotes","_React$useState10","formData","setFormData","_React$useState11","message","files","links","_React$useState12","messageData","setMessageData","_React$useState13","_React$useState14","formError","setFormError","officeObject","getAllOfficeSections","forEach","office","sectionName","sectionOffice","officeName","refNum","officeId","sectionId","typesObject","getAllThreadTypes","type","docType","docId","purposesObject","getAllThreadPurpose","purpose","purposeName","purposeId","officersObject","getAccountsByOffice","officer","firstName","lastName","accountId","docTypeId","find","state","_objectSpread","_jsx","LoadOverlay","open","handleCloseSnackbar","general","undefined","handleCreateThread","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","threadResult","uploadedFiles","insertedLinks","form","result","messageFiles","i","thread","wrap","_context","prev","next","recipient","abrupt","length","sent","FormData","file","append","axios","post","process","t0","map","link","fileName","name","fileType","fileUrl","senderId","threadId","refId","onCreateThread","t1","t2","stop","apply","arguments","Paper","sx","width","children","Box","maxHeight","overflowY","overflowX","height","background","palette","grey","secondary","main","primary","dark","_jsxs","Stack","spacing","p","direction","justifyContent","alignItems","py","Button","variant","endIcon","SendIcon","onClick","Tooltip","title","IconButton","onDiscardThread","DeleteOutlinedIcon","Typography","fontWeight","getThreadRefNum","Divider","Chip","label","Autocomplete","multiple","freeSolo","fullWidth","options","Object","keys","onChange","_","newValue","value","filter","id","renderInput","params","TextField","error","helperText","event","target","onInputChange","select","parseInt","MenuItem","getAllThreadTags","tag","tagName","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","views","dayjs","date","format","FormControlLabel","control","Checkbox","checked","ReplyBox","Snackbar","autoHideDuration","onClose","Alert","severity","FilterPopover","threadStatus","GET_ALL_THREAD_STATUS","_useState","useState","_useState2","setOpen","handleToggle","_Fragment","mx","zIndex","content","borderRadius","position","bgcolor","alpha","FilterListIcon","Drawer","anchor","px","minWidth","startIcon","ClearAllIcon","typeId","sortBy","FormControl","FormLabel","RadioGroup","Radio","getAllThreadStatus","status","statusLabel","emptyMessages","sub","getTagColor","formatInboxDate","toLocaleDateString","weekday","year","month","day","EmailList","page","setPage","rowsPerPage","setRowsPerPage","setOptions","visibleRows","_props$mails","mails","mail","_mail$threadTag","threadTag","sort","a","b","dateCreated","getTime","slice","mb","mode","AddIcon","disabled","compose","onComposeThread","onRefresh","RefreshIcon","option","List","display","flexDirection","FolderCopyIcon","color","fontSize","msg","ListItemButton","selected","Boolean","selectedId","onThreadClick","ListItemAvatar","Avatar","author","charAt","ListItemText","gutterBottom","component","completed","size","TablePagination","rowsPerPageOptions","count","_mail$threadTag2","onPageChange","newPage","onRowsPerPageChange","LinkDialog","setName","setLink","Dialog","maxWidth","onSubmit","preventDefault","DialogTitle","DialogContent","autoFocus","margin","required","DialogActions","attached","setAttachments","fileNames","handleSendThreadMessage","_ref2","backgroundColor","multiline","rows","bottom","left","right","FileUploadIcon","_toConsumableArray","hidden","InsertLinkIcon","onDelete","l","f","handleDelete","ReplyIcon","MessageCard","sender","Card","CardHeader","avatar","subheader","role","roleName","action","dateSent","CardContent","mt","href","clickable","fileId","border","SignatureDialog","imageUrl","sigPad","setError","handleUploadSignature","_x","SignatureCanvas","penColor","ref","canvasProps","current","getTrimmedCanvas","toDataURL","clear","formatOfficeSections","Form2309","details","Document","Page","style","styles","body","View","table","tableRow","tableColLeft","Text","tableCellLeft","tableColRight","tableCellRight","refSlipNum","tableCellTag","toUpperCase","recipientCol","tableCellLeftBold","recipientList","join","dateCol","purposeCol","remarks","signatureUrl","signatureContainer","Image","signatureImage","src","signImage","emptyCell","tableCellCenter","tableCellCenterSmall","officeSection","tableCellLeftBoldSmall","Font","register","family","StyleSheet","create","paddingTop","paddingBottom","paddingRight","paddingLeft","borderStyle","borderWidth","padding","marginTop","textAlign","RequestDetails","onGenerate","UPLOAD_SIGNATURE","_useMutation2","uploadSignature","signError","UPDATE_THREAD","_useMutation4","updateThread","updateError","threadUpdate","setThreadUpdate","upload","setUpload","updated","setUpdated","messages","uploadForm","window","console","log","handleTextChange","_defineProperty","handleGenerateForm","_ref3","_callee2","blob","url","_context2","File","_x2","handleToggleSignature","handleSubmitESignature","_ref4","_callee3","_context3","_x3","handleRemoveSignature","_ref5","_callee4","_context4","handleUpdateThread","_ref6","_callee5","_context5","SaveIcon","defaultValue","PDFDownloadLink","document","_ref7","loading","ThreadDirectory","setFiles","msgFiles","reqForm","ListItem","ListItemIcon","FolderIcon","Link","History","history","index","includes","historyLabel","TabPanel","ThreadList","onUpdate","_useQuery","GET_THREAD_BY_ID","uid","threadData","liveThread","useSubscription","THREAD_MESSAGES_SUBSCRIBE","UPDATE_THREAD_STATUS","updateThreadStatus","SET_MESSAGE_AS_READ","setMessageAsRead","_useMutation5","ARCHIVE_THREAD","archiveThread","_useMutation7","RESTORE_THREAD","restoreThread","tabValue","setTableValue","expanded","setExpanded","setStatusId","attach","setAttach","setCompleted","referenceNum","getThreadById","user","handleStatusChange","reloadThread","handleAttachmentChange","handleArchiveThread","handleRestoreThread","_threadData$getThread","dateUpdated","active","recipientUser","CloseIcon","TuneIcon","Collapse","in","timeout","unmountOnExit","my","Tabs","e","Tab","pl","pr","msgId","ThreadHistory"],"sourceRoot":""}